{"status":"unsafe","types":{"268":{"16":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}","ident":"lq_anf$##7205759403792805072","row":268,"col":16},"8":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805073","row":268,"col":8},"33":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","row":268,"col":33},"38":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","row":268,"col":38}},"51":{"23":{"ann":"{v : GHC.Types.Int | 1 <= v\n                     && v == x}","ident":"x","row":51,"col":23},"40":{"ann":"{v : [{v : GHC.Types.Int | 1 <= v}] | len v >= 0\n                                      && v == xs}","ident":"xs","row":51,"col":40},"27":{"ann":"{v : GHC.Types.Int | v == sumPositives xs\n                     && v >= 0\n                     && len xs <= v}","ident":"lq_anf$##7205759403792804969","row":51,"col":27}},"253":{"44":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":253,"col":44},"17":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"xs","row":253,"col":17},"1":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}","ident":"Data.Heap.Binominal.reverseHeapList","row":253,"col":1},"41":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","row":253,"col":41}},"205":{"28":{"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}","ident":"lq_anf$##7205759403792805042","row":205,"col":28},"19":{"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a2G1}","ident":"$dOrd_a2G1","row":205,"col":19},"26":{"ann":"{VV : a | VV == x}","ident":"x","row":205,"col":26},"38":{"ann":"{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}","ident":"xs","row":205,"col":38}},"258":{"56":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == x}","ident":"x","row":258,"col":56},"52":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","row":258,"col":52},"58":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}","ident":"acc","row":258,"col":58},"55":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && mapSize v == : (size x) (mapSize acc)\n                                      && sumPositives v == x + sumPositives acc\n                                      && sumSizeList v == sumPositives (mapSize (: x acc))}","ident":"lq_anf$##7205759403792805057","row":258,"col":55},"33":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}","ident":"Data.Heap.Binominal.reverseHeapListAux","row":258,"col":33}},"280":{"19":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}","ident":"Data.Heap.Binominal.deleteMin'","row":280,"col":19},"12":{"ann":"{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}","ident":"ts'","row":280,"col":12},"30":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2V9","row":280,"col":30},"8":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t'","row":280,"col":8}},"309":{"17":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","row":309,"col":17},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.merge'","row":309,"col":1},"8":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"ts1","row":309,"col":8}},"156":{"5":{"ann":"a","ident":"ds_d2Tz","row":156,"col":5},"11":{"ann":"a","ident":"ds_d2TD","row":156,"col":11}},"332":{"22":{"ann":"(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))","ident":"_","row":332,"col":22},"16":{"ann":"(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})","ident":"h'","row":332,"col":16},"8":{"ann":"a","ident":"minElt","row":332,"col":8},"33":{"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}","ident":"ds_d2VY","row":332,"col":33}},"310":{"17":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2U4","row":310,"col":17}},"57":{"31":{"ann":"[{v : GHC.Types.Int | 1 <= v}]","ident":"lq_anf$##7205759403792804971","row":57,"col":31},"18":{"ann":"x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}","ident":"Data.Heap.Binominal.sumPositives","row":57,"col":18},"40":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}","ident":"ds_d2WE","row":57,"col":40}},"287":{"48":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}","ident":"tBounded'","row":287,"col":48},"43":{"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","row":287,"col":43},"14":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}","ident":"_","row":287,"col":14},"45":{"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","row":287,"col":45},"9":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}","ident":"hd","row":287,"col":9}},"151":{"1":{"ann":"forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b","ident":"Data.Heap.Binominal.assertBoundedTreeList","row":151,"col":1},"27":{"ann":"a","ident":"x","row":151,"col":27}},"50":{"19":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792804968","row":50,"col":19},"1":{"ann":"x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}","ident":"Data.Heap.Binominal.sumPositives","row":50,"col":1}},"44":{"14":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":44,"col":14},"1":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : [{VV : GHC.Types.Int | 1 <= VV}] | VV == mapSize x1\n                                                                              && len VV == len x1}","ident":"Data.Heap.Binominal.mapSize","row":44,"col":1}},"167":{"14":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":167,"col":14},"1":{"ann":"forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}","ident":"Data.Heap.Binominal.empty","row":167,"col":1}},"157":{"25":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"_","row":157,"col":25},"53":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"lq_anf$##7205759403792804981","row":157,"col":53},"9":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t2BoundedByX2","row":157,"col":9}},"175":{"28":{"ann":"{VV : a | VV == x}","ident":"x","row":175,"col":28},"30":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":175,"col":30},"1":{"ann":"forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}","ident":"Data.Heap.Binominal.singleton","row":175,"col":1},"26":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805044","row":175,"col":26},"20":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805050","row":175,"col":20},"11":{"ann":"a","ident":"x","row":175,"col":11},"33":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805047","row":175,"col":33},"21":{"ann":"{v : (Data.Heap.Binominal.Tree a) | root v == x}","ident":"lq_anf$##7205759403792805048","row":175,"col":21}},"333":{"12":{"ann":"{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}","ident":"lq_anf$##7205759403792805083","row":333,"col":12},"3":{"ann":"{VV : a | VV == minElt}","ident":"minElt","row":333,"col":3},"21":{"ann":"{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}","ident":"h'","row":333,"col":21}},"56":{"1":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}","ident":"Data.Heap.Binominal.sumSizeList","row":56,"col":1},"18":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792804972","row":56,"col":18}},"281":{"7":{"ann":"{VV : a | VV == root t}","ident":"x","row":281,"col":7},"16":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":281,"col":16},"11":{"ann":"{VV : a | VV == root t}","ident":"_","row":281,"col":11}},"284":{"7":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}","ident":"tBounded'","row":284,"col":7},"19":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}","ident":"_","row":284,"col":19},"47":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","row":284,"col":47}},"314":{"25":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","row":314,"col":25},"59":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}","ident":"ts2'","row":314,"col":59},"39":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","row":314,"col":39},"46":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}","ident":"lq_anf$##7205759403792805022","row":314,"col":46},"33":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}","ident":"lq_anf$##7205759403792805021","row":314,"col":33},"42":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","row":314,"col":42},"54":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}","ident":"ts1'","row":314,"col":54}},"273":{"36":{"ann":"((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])","ident":"lq_anf$##7205759403792805075","row":273,"col":36},"63":{"ann":"{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}","ident":"h","row":273,"col":63},"47":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}","ident":"lq_anf$##7205759403792805074","row":273,"col":47}},"68":{"22":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : GHC.Types.Int | v == sumSizeList x1\n                                                          && v >= 0\n                                                          && len x1 <= v}","ident":"Data.Heap.Binominal.sumSizeList","row":68,"col":22},"1":{"ann":"forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}","ident":"Data.Heap.Binominal.heapSize","row":68,"col":1},"34":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"ts","row":68,"col":34}},"187":{"36":{"ann":"{v : (Data.Heap.Binominal.Tree a) | root v == x}","ident":"lq_anf$##7205759403792805007","row":187,"col":36},"49":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805006","row":187,"col":49},"22":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}","ident":"Data.Heap.Binominal.Heap","row":187,"col":22},"44":{"ann":"{VV : a | VV == x}","ident":"x","row":187,"col":44},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}","ident":"Data.Heap.Binominal.insert","row":187,"col":1},"52":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"ts","row":187,"col":52},"46":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":187,"col":46},"27":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805008","row":187,"col":27},"8":{"ann":"a","ident":"x","row":187,"col":8},"42":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805003","row":187,"col":42}},"247":{"37":{"ann":"forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}","ident":"_","row":247,"col":37},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a","ident":"Data.Heap.Binominal.minimum","row":247,"col":1},"18":{"ann":"forall a b . x1:(a, b) -> {VV : a | VV == fst x1}","ident":"_","row":247,"col":18},"11":{"ann":"forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}","ident":"_","row":247,"col":11},"24":{"ann":"x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}","ident":"lq_anf$##7205759403792805064","row":247,"col":24}},"45":{"35":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","row":45,"col":35},"23":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == x}","ident":"x","row":45,"col":23},"18":{"ann":"{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}","ident":"lq_anf$##7205759403792804965","row":45,"col":18},"27":{"ann":"{v : [{v : GHC.Types.Int | 1 <= v}] | v == mapSize xs\n                                      && len v == len xs}","ident":"lq_anf$##7205759403792804966","row":45,"col":27}},"292":{"13":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}","ident":"ts'","row":292,"col":13},"6":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","row":292,"col":6},"10":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}","ident":"hd","row":292,"col":10}},"191":{"17":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":191,"col":17},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","row":191,"col":1},"16":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}","ident":"lq_anf$##7205759403792804995","row":191,"col":16},"9":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t","row":191,"col":9}},"1":{"1":{"ann":"GHC.Types.Module","ident":"Data.Heap.Binominal.$trModule","row":1,"col":1}},"194":{"44":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}","ident":"ts'","row":194,"col":44},"40":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","row":194,"col":40},"38":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":194,"col":38},"24":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","row":194,"col":24},"32":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}","ident":"lq_anf$##7205759403792805000","row":194,"col":32}},"163":{"14":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804985","row":163,"col":14},"17":{"ann":"a","ident":"ds_d2TD","row":163,"col":17},"35":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TE","row":163,"col":35},"40":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804988","row":163,"col":40},"20":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}","ident":"lq_anf$##7205759403792804987","row":163,"col":20},"41":{"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TB","row":163,"col":41},"11":{"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2TC","row":163,"col":11},"47":{"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TF","row":163,"col":47},"21":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}","ident":"t1BoundedByX2","row":163,"col":21},"10":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804986","row":163,"col":10}},"158":{"25":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}","ident":"_","row":158,"col":25},"57":{"ann":"a","ident":"ds_d2TD","row":158,"col":57},"60":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}","ident":"t2BoundedByX2","row":158,"col":60},"9":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}","ident":"t2BoundedByX1","row":158,"col":9},"54":{"ann":"a","ident":"ds_d2Tz","row":158,"col":54}},"272":{"12":{"ann":"{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}","ident":"h","row":272,"col":12},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}","ident":"Data.Heap.Binominal.deleteMin2","row":272,"col":1}},"285":{"6":{"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","row":285,"col":6},"10":{"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","row":285,"col":10}},"171":{"19":{"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}","ident":"h","row":171,"col":19},"1":{"ann":"forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}","ident":"Data.Heap.Binominal.null","row":171,"col":1},"24":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804978","row":171,"col":24},"6":{"ann":"(Data.Heap.Binominal.Heap a)","ident":"h","row":171,"col":6},"10":{"ann":"{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}","ident":"lq_anf$##7205759403792804976","row":171,"col":10}},"337":{"28":{"ann":"x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}","ident":"lq_anf$##7205759403792805085","row":337,"col":28},"17":{"ann":"x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}","ident":"lq_anf$##7205759403792805084","row":337,"col":17},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}","ident":"Data.Heap.Binominal.sortUsingHeap","row":337,"col":1}},"266":{"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}","ident":"Data.Heap.Binominal.deleteMin","row":266,"col":1},"11":{"ann":"{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}","ident":"h","row":266,"col":11}},"103":{"30":{"ann":"a","ident":"x","row":103,"col":30},"1":{"ann":"forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}","ident":"Data.Heap.Binominal.boundedTreeTransitivityLemma","row":103,"col":1},"34":{"ann":"(Data.Heap.Binominal.Tree {VV : a | y <= VV})","ident":"tree","row":103,"col":34},"32":{"ann":"{VV : a | x <= VV}","ident":"y","row":103,"col":32}},"147":{"1":{"ann":"forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b","ident":"Data.Heap.Binominal.assertBoundedTree","row":147,"col":1},"23":{"ann":"a","ident":"x","row":147,"col":23}},"200":{"14":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805054","row":200,"col":14},"22":{"ann":"{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}","ident":"xs","row":200,"col":22},"18":{"ann":"{v : GHC.Types.Int | v == len xs\n                     && v >= 0}","ident":"lq_anf$##7205759403792805055","row":200,"col":18}},"291":{"48":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}","ident":"tBounded","row":291,"col":48},"43":{"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","row":291,"col":43},"14":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}","ident":"_","row":291,"col":14},"46":{"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","row":291,"col":46},"9":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}","ident":"hd","row":291,"col":9}},"288":{"14":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}","ident":"_","row":288,"col":14},"49":{"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","row":288,"col":49},"52":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}","ident":"ts'","row":288,"col":52},"47":{"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","row":288,"col":47},"9":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}","ident":"tl","row":288,"col":9}},"162":{"25":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}","ident":"_","row":162,"col":25},"57":{"ann":"a","ident":"ds_d2Tz","row":162,"col":57},"60":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}","ident":"t1BoundedByX1","row":162,"col":60},"9":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}","ident":"t1BoundedByX2","row":162,"col":9},"54":{"ann":"a","ident":"ds_d2TD","row":162,"col":54}},"159":{"14":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804990","row":159,"col":14},"17":{"ann":"a","ident":"ds_d2Tz","row":159,"col":17},"35":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TA","row":159,"col":35},"40":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804993","row":159,"col":40},"20":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}","ident":"lq_anf$##7205759403792804992","row":159,"col":20},"41":{"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TB","row":159,"col":41},"11":{"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2Ty","row":159,"col":11},"47":{"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TF","row":159,"col":47},"21":{"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}","ident":"t2BoundedByX1","row":159,"col":21},"10":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804991","row":159,"col":10}},"278":{"22":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":278,"col":22},"19":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":278,"col":19},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}","ident":"Data.Heap.Binominal.deleteMin'","row":278,"col":1},"18":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}","ident":"lq_anf$##7205759403792805037","row":278,"col":18}},"257":{"29":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}","ident":"acc","row":257,"col":29},"1":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}","ident":"Data.Heap.Binominal.reverseHeapListAux","row":257,"col":1},"23":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"acc","row":257,"col":23}},"282":{"7":{"ann":"{VV : a | VV == root t'}","ident":"x'","row":282,"col":7},"12":{"ann":"{VV : a | VV == root t'}","ident":"_","row":282,"col":12},"17":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","row":282,"col":17}},"330":{"22":{"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","row":330,"col":22},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}","ident":"Data.Heap.Binominal.heapSort","row":330,"col":1}},"312":{"15":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}","ident":"lq_anf$##7205759403792805014","row":312,"col":15},"37":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}","ident":"ts1'","row":312,"col":37},"25":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","row":312,"col":25},"30":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805024","row":312,"col":30},"20":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","row":312,"col":20},"5":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}","ident":"lq_anf$##7205759403792805013","row":312,"col":5},"42":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2U4","row":312,"col":42},"10":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","row":312,"col":10}},"289":{"12":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == tl}","ident":"tl","row":289,"col":12},"6":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":289,"col":6},"9":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}","ident":"hd","row":289,"col":9}},"193":{"28":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TI","row":193,"col":28},"14":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}","ident":"lq_anf$##7205759403792804997","row":193,"col":14},"19":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","row":193,"col":19},"5":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t}","ident":"lq_anf$##7205759403792804996","row":193,"col":5},"24":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":193,"col":24},"10":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":193,"col":10}},"267":{"31":{"ann":"((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])","ident":"lq_anf$##7205759403792805069","row":267,"col":31},"58":{"ann":"{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}","ident":"h","row":267,"col":58},"42":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}","ident":"lq_anf$##7205759403792805068","row":267,"col":42}},"143":{"1":{"ann":"forall a . {v : GHC.Types.Bool | v} -> a -> a","ident":"Data.Heap.Binominal.assert","row":143,"col":1},"10":{"ann":"a","ident":"x","row":143,"col":10}},"204":{"15":{"ann":"forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}","ident":"_","row":204,"col":15},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}","ident":"Data.Heap.Binominal.fromList","row":204,"col":1}},"97":{"1":{"ann":"forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}","ident":"Data.Heap.Binominal.treeIsBoundedByItsRootLemma","row":97,"col":1}},"262":{"1":{"ann":"forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}","ident":"Data.Heap.Binominal.unheapNonempty","row":262,"col":1},"34":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"lq_anf$##7205759403792805060","row":262,"col":34}},"161":{"25":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"_","row":161,"col":25},"53":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"lq_anf$##7205759403792804980","row":161,"col":53},"9":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t1BoundedByX1","row":161,"col":9}},"107":{"36":{"ann":"{VV : a | x <= VV}","ident":"y","row":107,"col":36},"1":{"ann":"forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}","ident":"Data.Heap.Binominal.boundedTreeListTransitivityLemma","row":107,"col":1},"34":{"ann":"a","ident":"x","row":107,"col":34},"38":{"ann":"[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]","ident":"ts","row":107,"col":38}},"305":{"48":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","row":305,"col":48},"31":{"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}","ident":"Data.Heap.Binominal.Heap","row":305,"col":31},"36":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}","ident":"lq_anf$##7205759403792805029","row":305,"col":36},"44":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","row":305,"col":44},"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}","ident":"Data.Heap.Binominal.merge","row":305,"col":1}},"313":{"15":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}","ident":"lq_anf$##7205759403792805018","row":313,"col":15},"37":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","row":313,"col":37},"25":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","row":313,"col":25},"30":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}","ident":"lq_anf$##7205759403792805023","row":313,"col":30},"20":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","row":313,"col":20},"5":{"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}","ident":"lq_anf$##7205759403792805017","row":313,"col":5},"41":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}","ident":"ts2'","row":313,"col":41},"10":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","row":313,"col":10}},"274":{"25":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}","ident":"lq_anf$##7205759403792805078","row":274,"col":25},"12":{"ann":"(Data.Heap.Binominal.Heap a)","ident":"lq_anf$##7205759403792805080","row":274,"col":12},"17":{"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805079","row":274,"col":17},"4":{"ann":"{VV : a | VV == minElt}","ident":"minElt","row":274,"col":4},"47":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","row":274,"col":47},"42":{"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && v == ts1}","ident":"ts1","row":274,"col":42}},"98":{"43":{"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2Tb","row":98,"col":43},"14":{"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2T8","row":98,"col":14},"22":{"ann":"a","ident":"ds_d2T9","row":98,"col":22},"34":{"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2Ta","row":98,"col":34},"3":{"ann":"forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}","ident":"Data.Heap.Binominal.Node","row":98,"col":3}},"283":{"7":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}","ident":"tBounded","row":283,"col":7},"18":{"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}","ident":"_","row":283,"col":18},"46":{"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","row":283,"col":46}},"199":{"1":{"ann":"forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}","ident":"Data.Heap.Binominal.len","row":199,"col":1},"10":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805052","row":199,"col":10}},"155":{"1":{"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}","ident":"Data.Heap.Binominal.link","row":155,"col":1},"59":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t2","row":155,"col":59},"6":{"ann":"(Data.Heap.Binominal.Tree a)","ident":"t1","row":155,"col":6}}},"sptypes":[{"start":{"line":1,"column":1},"ann":"GHC.Types.Module","ident":"Data.Heap.Binominal.$trModule","stop":{"line":1,"column":1}},{"start":{"line":44,"column":1},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : [{VV : GHC.Types.Int | 1 <= VV}] | VV == mapSize x1\n                                                                              && len VV == len x1}","ident":"Data.Heap.Binominal.mapSize","stop":{"line":44,"column":8}},{"start":{"line":44,"column":14},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":44,"column":16}},{"start":{"line":45,"column":18},"ann":"{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}","ident":"lq_anf$##7205759403792804965","stop":{"line":45,"column":24}},{"start":{"line":45,"column":23},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == x}","ident":"x","stop":{"line":45,"column":24}},{"start":{"line":45,"column":27},"ann":"{v : [{v : GHC.Types.Int | 1 <= v}] | v == mapSize xs\n                                      && len v == len xs}","ident":"lq_anf$##7205759403792804966","stop":{"line":45,"column":37}},{"start":{"line":45,"column":35},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","stop":{"line":45,"column":37}},{"start":{"line":50,"column":1},"ann":"x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}","ident":"Data.Heap.Binominal.sumPositives","stop":{"line":50,"column":13}},{"start":{"line":50,"column":19},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792804968","stop":{"line":50,"column":20}},{"start":{"line":51,"column":23},"ann":"{v : GHC.Types.Int | 1 <= v\n                     && v == x}","ident":"x","stop":{"line":51,"column":24}},{"start":{"line":51,"column":27},"ann":"{v : GHC.Types.Int | v == sumPositives xs\n                     && v >= 0\n                     && len xs <= v}","ident":"lq_anf$##7205759403792804969","stop":{"line":51,"column":42}},{"start":{"line":51,"column":40},"ann":"{v : [{v : GHC.Types.Int | 1 <= v}] | len v >= 0\n                                      && v == xs}","ident":"xs","stop":{"line":51,"column":42}},{"start":{"line":56,"column":1},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}","ident":"Data.Heap.Binominal.sumSizeList","stop":{"line":56,"column":12}},{"start":{"line":56,"column":18},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792804972","stop":{"line":56,"column":19}},{"start":{"line":57,"column":18},"ann":"x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}","ident":"Data.Heap.Binominal.sumPositives","stop":{"line":57,"column":43}},{"start":{"line":57,"column":31},"ann":"[{v : GHC.Types.Int | 1 <= v}]","ident":"lq_anf$##7205759403792804971","stop":{"line":57,"column":43}},{"start":{"line":57,"column":40},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}","ident":"ds_d2WE","stop":{"line":57,"column":42}},{"start":{"line":68,"column":1},"ann":"forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}","ident":"Data.Heap.Binominal.heapSize","stop":{"line":68,"column":9}},{"start":{"line":68,"column":22},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : GHC.Types.Int | v == sumSizeList x1\n                                                          && v >= 0\n                                                          && len x1 <= v}","ident":"Data.Heap.Binominal.sumSizeList","stop":{"line":68,"column":36}},{"start":{"line":68,"column":34},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"ts","stop":{"line":68,"column":36}},{"start":{"line":97,"column":1},"ann":"forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}","ident":"Data.Heap.Binominal.treeIsBoundedByItsRootLemma","stop":{"line":97,"column":28}},{"start":{"line":98,"column":3},"ann":"forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}","ident":"Data.Heap.Binominal.Node","stop":{"line":98,"column":46}},{"start":{"line":98,"column":14},"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2T8","stop":{"line":98,"column":15}},{"start":{"line":98,"column":22},"ann":"a","ident":"ds_d2T9","stop":{"line":98,"column":23}},{"start":{"line":98,"column":34},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2Ta","stop":{"line":98,"column":36}},{"start":{"line":98,"column":43},"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2Tb","stop":{"line":98,"column":45}},{"start":{"line":103,"column":1},"ann":"forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}","ident":"Data.Heap.Binominal.boundedTreeTransitivityLemma","stop":{"line":103,"column":29}},{"start":{"line":103,"column":30},"ann":"a","ident":"x","stop":{"line":103,"column":31}},{"start":{"line":103,"column":32},"ann":"{VV : a | x <= VV}","ident":"y","stop":{"line":103,"column":33}},{"start":{"line":103,"column":34},"ann":"(Data.Heap.Binominal.Tree {VV : a | y <= VV})","ident":"tree","stop":{"line":103,"column":38}},{"start":{"line":107,"column":1},"ann":"forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}","ident":"Data.Heap.Binominal.boundedTreeListTransitivityLemma","stop":{"line":107,"column":33}},{"start":{"line":107,"column":34},"ann":"a","ident":"x","stop":{"line":107,"column":35}},{"start":{"line":107,"column":36},"ann":"{VV : a | x <= VV}","ident":"y","stop":{"line":107,"column":37}},{"start":{"line":107,"column":38},"ann":"[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]","ident":"ts","stop":{"line":107,"column":40}},{"start":{"line":143,"column":1},"ann":"forall a . {v : GHC.Types.Bool | v} -> a -> a","ident":"Data.Heap.Binominal.assert","stop":{"line":143,"column":7}},{"start":{"line":143,"column":10},"ann":"a","ident":"x","stop":{"line":143,"column":11}},{"start":{"line":147,"column":1},"ann":"forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b","ident":"Data.Heap.Binominal.assertBoundedTree","stop":{"line":147,"column":18}},{"start":{"line":147,"column":23},"ann":"a","ident":"x","stop":{"line":147,"column":24}},{"start":{"line":151,"column":1},"ann":"forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b","ident":"Data.Heap.Binominal.assertBoundedTreeList","stop":{"line":151,"column":22}},{"start":{"line":151,"column":27},"ann":"a","ident":"x","stop":{"line":151,"column":28}},{"start":{"line":155,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}","ident":"Data.Heap.Binominal.link","stop":{"line":155,"column":5}},{"start":{"line":155,"column":6},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t1","stop":{"line":155,"column":8}},{"start":{"line":155,"column":59},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t2","stop":{"line":155,"column":61}},{"start":{"line":156,"column":5},"ann":"a","ident":"ds_d2Tz","stop":{"line":156,"column":7}},{"start":{"line":156,"column":11},"ann":"a","ident":"ds_d2TD","stop":{"line":156,"column":13}},{"start":{"line":157,"column":9},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t2BoundedByX2","stop":{"line":157,"column":22}},{"start":{"line":157,"column":25},"ann":"(Data.Heap.Binominal.Tree a)","ident":"_","stop":{"line":157,"column":55}},{"start":{"line":157,"column":53},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"lq_anf$##7205759403792804981","stop":{"line":157,"column":55}},{"start":{"line":158,"column":9},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}","ident":"t2BoundedByX1","stop":{"line":158,"column":22}},{"start":{"line":158,"column":25},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}","ident":"_","stop":{"line":158,"column":73}},{"start":{"line":158,"column":54},"ann":"a","ident":"ds_d2Tz","stop":{"line":158,"column":56}},{"start":{"line":158,"column":57},"ann":"a","ident":"ds_d2TD","stop":{"line":158,"column":59}},{"start":{"line":158,"column":60},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}","ident":"t2BoundedByX2","stop":{"line":158,"column":73}},{"start":{"line":159,"column":10},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804991","stop":{"line":159,"column":16}},{"start":{"line":159,"column":11},"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2Ty","stop":{"line":159,"column":13}},{"start":{"line":159,"column":14},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804990","stop":{"line":159,"column":15}},{"start":{"line":159,"column":17},"ann":"a","ident":"ds_d2Tz","stop":{"line":159,"column":19}},{"start":{"line":159,"column":20},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}","ident":"lq_anf$##7205759403792804992","stop":{"line":159,"column":39}},{"start":{"line":159,"column":21},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}","ident":"t2BoundedByX1","stop":{"line":159,"column":34}},{"start":{"line":159,"column":35},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TA","stop":{"line":159,"column":38}},{"start":{"line":159,"column":40},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804993","stop":{"line":159,"column":51}},{"start":{"line":159,"column":41},"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TB","stop":{"line":159,"column":44}},{"start":{"line":159,"column":47},"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TF","stop":{"line":159,"column":50}},{"start":{"line":161,"column":9},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t1BoundedByX1","stop":{"line":161,"column":22}},{"start":{"line":161,"column":25},"ann":"(Data.Heap.Binominal.Tree a)","ident":"_","stop":{"line":161,"column":55}},{"start":{"line":161,"column":53},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"lq_anf$##7205759403792804980","stop":{"line":161,"column":55}},{"start":{"line":162,"column":9},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}","ident":"t1BoundedByX2","stop":{"line":162,"column":22}},{"start":{"line":162,"column":25},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}","ident":"_","stop":{"line":162,"column":73}},{"start":{"line":162,"column":54},"ann":"a","ident":"ds_d2TD","stop":{"line":162,"column":56}},{"start":{"line":162,"column":57},"ann":"a","ident":"ds_d2Tz","stop":{"line":162,"column":59}},{"start":{"line":162,"column":60},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}","ident":"t1BoundedByX1","stop":{"line":162,"column":73}},{"start":{"line":163,"column":10},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804986","stop":{"line":163,"column":16}},{"start":{"line":163,"column":11},"ann":"{v : GHC.Types.Int | v >= 0}","ident":"ds_d2TC","stop":{"line":163,"column":13}},{"start":{"line":163,"column":14},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804985","stop":{"line":163,"column":15}},{"start":{"line":163,"column":17},"ann":"a","ident":"ds_d2TD","stop":{"line":163,"column":19}},{"start":{"line":163,"column":20},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}","ident":"lq_anf$##7205759403792804987","stop":{"line":163,"column":39}},{"start":{"line":163,"column":21},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}","ident":"t1BoundedByX2","stop":{"line":163,"column":34}},{"start":{"line":163,"column":35},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TE","stop":{"line":163,"column":38}},{"start":{"line":163,"column":40},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804988","stop":{"line":163,"column":51}},{"start":{"line":163,"column":41},"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TB","stop":{"line":163,"column":44}},{"start":{"line":163,"column":47},"ann":"{v : GHC.Types.Int | 1 <= v}","ident":"ds_d2TF","stop":{"line":163,"column":50}},{"start":{"line":167,"column":1},"ann":"forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}","ident":"Data.Heap.Binominal.empty","stop":{"line":167,"column":6}},{"start":{"line":167,"column":14},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":167,"column":16}},{"start":{"line":171,"column":1},"ann":"forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}","ident":"Data.Heap.Binominal.null","stop":{"line":171,"column":5}},{"start":{"line":171,"column":6},"ann":"(Data.Heap.Binominal.Heap a)","ident":"h","stop":{"line":171,"column":7}},{"start":{"line":171,"column":10},"ann":"{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}","ident":"lq_anf$##7205759403792804976","stop":{"line":171,"column":20}},{"start":{"line":171,"column":19},"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}","ident":"h","stop":{"line":171,"column":20}},{"start":{"line":171,"column":24},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792804978","stop":{"line":171,"column":25}},{"start":{"line":175,"column":1},"ann":"forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}","ident":"Data.Heap.Binominal.singleton","stop":{"line":175,"column":10}},{"start":{"line":175,"column":11},"ann":"a","ident":"x","stop":{"line":175,"column":12}},{"start":{"line":175,"column":20},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805050","stop":{"line":175,"column":35}},{"start":{"line":175,"column":21},"ann":"{v : (Data.Heap.Binominal.Tree a) | root v == x}","ident":"lq_anf$##7205759403792805048","stop":{"line":175,"column":34}},{"start":{"line":175,"column":26},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805044","stop":{"line":175,"column":27}},{"start":{"line":175,"column":28},"ann":"{VV : a | VV == x}","ident":"x","stop":{"line":175,"column":29}},{"start":{"line":175,"column":30},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":175,"column":32}},{"start":{"line":175,"column":33},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805047","stop":{"line":175,"column":34}},{"start":{"line":187,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}","ident":"Data.Heap.Binominal.insert","stop":{"line":187,"column":7}},{"start":{"line":187,"column":8},"ann":"a","ident":"x","stop":{"line":187,"column":9}},{"start":{"line":187,"column":22},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}","ident":"Data.Heap.Binominal.Heap","stop":{"line":187,"column":55}},{"start":{"line":187,"column":27},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805008","stop":{"line":187,"column":55}},{"start":{"line":187,"column":36},"ann":"{v : (Data.Heap.Binominal.Tree a) | root v == x}","ident":"lq_anf$##7205759403792805007","stop":{"line":187,"column":51}},{"start":{"line":187,"column":42},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805003","stop":{"line":187,"column":43}},{"start":{"line":187,"column":44},"ann":"{VV : a | VV == x}","ident":"x","stop":{"line":187,"column":45}},{"start":{"line":187,"column":46},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":187,"column":48}},{"start":{"line":187,"column":49},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805006","stop":{"line":187,"column":50}},{"start":{"line":187,"column":52},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"ts","stop":{"line":187,"column":54}},{"start":{"line":191,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","stop":{"line":191,"column":8}},{"start":{"line":191,"column":9},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t","stop":{"line":191,"column":10}},{"start":{"line":191,"column":16},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}","ident":"lq_anf$##7205759403792804995","stop":{"line":191,"column":19}},{"start":{"line":191,"column":17},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":191,"column":18}},{"start":{"line":193,"column":5},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t}","ident":"lq_anf$##7205759403792804996","stop":{"line":193,"column":11}},{"start":{"line":193,"column":10},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":193,"column":11}},{"start":{"line":193,"column":14},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}","ident":"lq_anf$##7205759403792804997","stop":{"line":193,"column":21}},{"start":{"line":193,"column":19},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","stop":{"line":193,"column":21}},{"start":{"line":193,"column":24},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":193,"column":25}},{"start":{"line":193,"column":28},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2TI","stop":{"line":193,"column":30}},{"start":{"line":194,"column":24},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","stop":{"line":194,"column":47}},{"start":{"line":194,"column":32},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}","ident":"lq_anf$##7205759403792805000","stop":{"line":194,"column":43}},{"start":{"line":194,"column":38},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":194,"column":39}},{"start":{"line":194,"column":40},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","stop":{"line":194,"column":42}},{"start":{"line":194,"column":44},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}","ident":"ts'","stop":{"line":194,"column":47}},{"start":{"line":199,"column":1},"ann":"forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}","ident":"Data.Heap.Binominal.len","stop":{"line":199,"column":4}},{"start":{"line":199,"column":10},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805052","stop":{"line":199,"column":11}},{"start":{"line":200,"column":14},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805054","stop":{"line":200,"column":15}},{"start":{"line":200,"column":18},"ann":"{v : GHC.Types.Int | v == len xs\n                     && v >= 0}","ident":"lq_anf$##7205759403792805055","stop":{"line":200,"column":24}},{"start":{"line":200,"column":22},"ann":"{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}","ident":"xs","stop":{"line":200,"column":24}},{"start":{"line":204,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}","ident":"Data.Heap.Binominal.fromList","stop":{"line":204,"column":9}},{"start":{"line":204,"column":15},"ann":"forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}","ident":"_","stop":{"line":204,"column":20}},{"start":{"line":205,"column":19},"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a2G1}","ident":"$dOrd_a2G1","stop":{"line":205,"column":41}},{"start":{"line":205,"column":26},"ann":"{VV : a | VV == x}","ident":"x","stop":{"line":205,"column":27}},{"start":{"line":205,"column":28},"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}","ident":"lq_anf$##7205759403792805042","stop":{"line":205,"column":41}},{"start":{"line":205,"column":38},"ann":"{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}","ident":"xs","stop":{"line":205,"column":40}},{"start":{"line":247,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a","ident":"Data.Heap.Binominal.minimum","stop":{"line":247,"column":8}},{"start":{"line":247,"column":11},"ann":"forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}","ident":"_","stop":{"line":247,"column":15}},{"start":{"line":247,"column":18},"ann":"forall a b . x1:(a, b) -> {VV : a | VV == fst x1}","ident":"_","stop":{"line":247,"column":21}},{"start":{"line":247,"column":24},"ann":"x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}","ident":"lq_anf$##7205759403792805064","stop":{"line":247,"column":34}},{"start":{"line":247,"column":37},"ann":"forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}","ident":"_","stop":{"line":247,"column":51}},{"start":{"line":253,"column":1},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}","ident":"Data.Heap.Binominal.reverseHeapList","stop":{"line":253,"column":16}},{"start":{"line":253,"column":17},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"xs","stop":{"line":253,"column":19}},{"start":{"line":253,"column":41},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","stop":{"line":253,"column":43}},{"start":{"line":253,"column":44},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":253,"column":46}},{"start":{"line":257,"column":1},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}","ident":"Data.Heap.Binominal.reverseHeapListAux","stop":{"line":257,"column":19}},{"start":{"line":257,"column":23},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"acc","stop":{"line":257,"column":26}},{"start":{"line":257,"column":29},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}","ident":"acc","stop":{"line":257,"column":32}},{"start":{"line":258,"column":33},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}","ident":"Data.Heap.Binominal.reverseHeapListAux","stop":{"line":258,"column":62}},{"start":{"line":258,"column":52},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}","ident":"xs","stop":{"line":258,"column":54}},{"start":{"line":258,"column":55},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && mapSize v == : (size x) (mapSize acc)\n                                      && sumPositives v == x + sumPositives acc\n                                      && sumSizeList v == sumPositives (mapSize (: x acc))}","ident":"lq_anf$##7205759403792805057","stop":{"line":258,"column":62}},{"start":{"line":258,"column":56},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == x}","ident":"x","stop":{"line":258,"column":57}},{"start":{"line":258,"column":58},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}","ident":"acc","stop":{"line":258,"column":61}},{"start":{"line":262,"column":1},"ann":"forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}","ident":"Data.Heap.Binominal.unheapNonempty","stop":{"line":262,"column":15}},{"start":{"line":262,"column":34},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}","ident":"lq_anf$##7205759403792805060","stop":{"line":262,"column":36}},{"start":{"line":266,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}","ident":"Data.Heap.Binominal.deleteMin","stop":{"line":266,"column":10}},{"start":{"line":266,"column":11},"ann":"{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}","ident":"h","stop":{"line":266,"column":12}},{"start":{"line":267,"column":31},"ann":"((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])","ident":"lq_anf$##7205759403792805069","stop":{"line":267,"column":60}},{"start":{"line":267,"column":42},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}","ident":"lq_anf$##7205759403792805068","stop":{"line":267,"column":60}},{"start":{"line":267,"column":58},"ann":"{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}","ident":"h","stop":{"line":267,"column":59}},{"start":{"line":268,"column":8},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805073","stop":{"line":268,"column":42}},{"start":{"line":268,"column":16},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}","ident":"lq_anf$##7205759403792805072","stop":{"line":268,"column":37}},{"start":{"line":268,"column":33},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","stop":{"line":268,"column":36}},{"start":{"line":268,"column":38},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","stop":{"line":268,"column":41}},{"start":{"line":272,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}","ident":"Data.Heap.Binominal.deleteMin2","stop":{"line":272,"column":11}},{"start":{"line":272,"column":12},"ann":"{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}","ident":"h","stop":{"line":272,"column":13}},{"start":{"line":273,"column":36},"ann":"((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])","ident":"lq_anf$##7205759403792805075","stop":{"line":273,"column":65}},{"start":{"line":273,"column":47},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}","ident":"lq_anf$##7205759403792805074","stop":{"line":273,"column":65}},{"start":{"line":273,"column":63},"ann":"{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}","ident":"h","stop":{"line":273,"column":64}},{"start":{"line":274,"column":4},"ann":"{VV : a | VV == minElt}","ident":"minElt","stop":{"line":274,"column":10}},{"start":{"line":274,"column":12},"ann":"(Data.Heap.Binominal.Heap a)","ident":"lq_anf$##7205759403792805080","stop":{"line":274,"column":51}},{"start":{"line":274,"column":17},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805079","stop":{"line":274,"column":51}},{"start":{"line":274,"column":25},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}","ident":"lq_anf$##7205759403792805078","stop":{"line":274,"column":46}},{"start":{"line":274,"column":42},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && v == ts1}","ident":"ts1","stop":{"line":274,"column":45}},{"start":{"line":274,"column":47},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","stop":{"line":274,"column":50}},{"start":{"line":278,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}","ident":"Data.Heap.Binominal.deleteMin'","stop":{"line":278,"column":11}},{"start":{"line":278,"column":18},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}","ident":"lq_anf$##7205759403792805037","stop":{"line":278,"column":25}},{"start":{"line":278,"column":19},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":278,"column":20}},{"start":{"line":278,"column":22},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":278,"column":24}},{"start":{"line":280,"column":8},"ann":"(Data.Heap.Binominal.Tree a)","ident":"t'","stop":{"line":280,"column":10}},{"start":{"line":280,"column":12},"ann":"{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}","ident":"ts'","stop":{"line":280,"column":15}},{"start":{"line":280,"column":19},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}","ident":"Data.Heap.Binominal.deleteMin'","stop":{"line":280,"column":32}},{"start":{"line":280,"column":30},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2V9","stop":{"line":280,"column":32}},{"start":{"line":281,"column":7},"ann":"{VV : a | VV == root t}","ident":"x","stop":{"line":281,"column":8}},{"start":{"line":281,"column":11},"ann":"{VV : a | VV == root t}","ident":"_","stop":{"line":281,"column":17}},{"start":{"line":281,"column":16},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":281,"column":17}},{"start":{"line":282,"column":7},"ann":"{VV : a | VV == root t'}","ident":"x'","stop":{"line":282,"column":9}},{"start":{"line":282,"column":12},"ann":"{VV : a | VV == root t'}","ident":"_","stop":{"line":282,"column":19}},{"start":{"line":282,"column":17},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","stop":{"line":282,"column":19}},{"start":{"line":283,"column":7},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}","ident":"tBounded","stop":{"line":283,"column":15}},{"start":{"line":283,"column":18},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}","ident":"_","stop":{"line":283,"column":47}},{"start":{"line":283,"column":46},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":283,"column":47}},{"start":{"line":284,"column":7},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}","ident":"tBounded'","stop":{"line":284,"column":16}},{"start":{"line":284,"column":19},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}","ident":"_","stop":{"line":284,"column":49}},{"start":{"line":284,"column":47},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","stop":{"line":284,"column":49}},{"start":{"line":285,"column":6},"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","stop":{"line":285,"column":7}},{"start":{"line":285,"column":10},"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","stop":{"line":285,"column":12}},{"start":{"line":287,"column":9},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}","ident":"hd","stop":{"line":287,"column":11}},{"start":{"line":287,"column":14},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}","ident":"_","stop":{"line":287,"column":57}},{"start":{"line":287,"column":43},"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","stop":{"line":287,"column":44}},{"start":{"line":287,"column":45},"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","stop":{"line":287,"column":47}},{"start":{"line":287,"column":48},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}","ident":"tBounded'","stop":{"line":287,"column":57}},{"start":{"line":288,"column":9},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}","ident":"tl","stop":{"line":288,"column":11}},{"start":{"line":288,"column":14},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}","ident":"_","stop":{"line":288,"column":55}},{"start":{"line":288,"column":47},"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","stop":{"line":288,"column":48}},{"start":{"line":288,"column":49},"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","stop":{"line":288,"column":51}},{"start":{"line":288,"column":52},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}","ident":"ts'","stop":{"line":288,"column":55}},{"start":{"line":289,"column":6},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t}","ident":"t","stop":{"line":289,"column":7}},{"start":{"line":289,"column":9},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}","ident":"hd","stop":{"line":289,"column":11}},{"start":{"line":289,"column":12},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == tl}","ident":"tl","stop":{"line":289,"column":14}},{"start":{"line":291,"column":9},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}","ident":"hd","stop":{"line":291,"column":11}},{"start":{"line":291,"column":14},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}","ident":"_","stop":{"line":291,"column":56}},{"start":{"line":291,"column":43},"ann":"{VV : a | VV == root t'\n          && VV == x'}","ident":"x'","stop":{"line":291,"column":45}},{"start":{"line":291,"column":46},"ann":"{VV : a | VV == root t\n          && VV == x}","ident":"x","stop":{"line":291,"column":47}},{"start":{"line":291,"column":48},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}","ident":"tBounded","stop":{"line":291,"column":56}},{"start":{"line":292,"column":6},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t'}","ident":"t'","stop":{"line":292,"column":8}},{"start":{"line":292,"column":10},"ann":"{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}","ident":"hd","stop":{"line":292,"column":12}},{"start":{"line":292,"column":13},"ann":"{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}","ident":"ts'","stop":{"line":292,"column":16}},{"start":{"line":305,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}","ident":"Data.Heap.Binominal.merge","stop":{"line":305,"column":6}},{"start":{"line":305,"column":31},"ann":"forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}","ident":"Data.Heap.Binominal.Heap","stop":{"line":305,"column":52}},{"start":{"line":305,"column":36},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}","ident":"lq_anf$##7205759403792805029","stop":{"line":305,"column":52}},{"start":{"line":305,"column":44},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","stop":{"line":305,"column":47}},{"start":{"line":305,"column":48},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}","ident":"ts2","stop":{"line":305,"column":51}},{"start":{"line":309,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.merge'","stop":{"line":309,"column":7}},{"start":{"line":309,"column":8},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"ts1","stop":{"line":309,"column":11}},{"start":{"line":309,"column":17},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","stop":{"line":309,"column":20}},{"start":{"line":310,"column":17},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2U4","stop":{"line":310,"column":20}},{"start":{"line":312,"column":5},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}","ident":"lq_anf$##7205759403792805013","stop":{"line":312,"column":12}},{"start":{"line":312,"column":10},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","stop":{"line":312,"column":12}},{"start":{"line":312,"column":15},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}","ident":"lq_anf$##7205759403792805014","stop":{"line":312,"column":22}},{"start":{"line":312,"column":20},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","stop":{"line":312,"column":22}},{"start":{"line":312,"column":25},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","stop":{"line":312,"column":27}},{"start":{"line":312,"column":30},"ann":"[(Data.Heap.Binominal.Tree a)]","ident":"lq_anf$##7205759403792805024","stop":{"line":312,"column":45}},{"start":{"line":312,"column":37},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}","ident":"ts1'","stop":{"line":312,"column":41}},{"start":{"line":312,"column":42},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}","ident":"ds_d2U4","stop":{"line":312,"column":45}},{"start":{"line":313,"column":5},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}","ident":"lq_anf$##7205759403792805017","stop":{"line":313,"column":12}},{"start":{"line":313,"column":10},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","stop":{"line":313,"column":12}},{"start":{"line":313,"column":15},"ann":"{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}","ident":"lq_anf$##7205759403792805018","stop":{"line":313,"column":22}},{"start":{"line":313,"column":20},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","stop":{"line":313,"column":22}},{"start":{"line":313,"column":25},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","stop":{"line":313,"column":27}},{"start":{"line":313,"column":30},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}","ident":"lq_anf$##7205759403792805023","stop":{"line":313,"column":45}},{"start":{"line":313,"column":37},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}","ident":"ts1","stop":{"line":313,"column":40}},{"start":{"line":313,"column":41},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}","ident":"ts2'","stop":{"line":313,"column":45}},{"start":{"line":314,"column":25},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}","ident":"Data.Heap.Binominal.insert'","stop":{"line":314,"column":64}},{"start":{"line":314,"column":33},"ann":"{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}","ident":"lq_anf$##7205759403792805021","stop":{"line":314,"column":45}},{"start":{"line":314,"column":39},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t1}","ident":"t1","stop":{"line":314,"column":41}},{"start":{"line":314,"column":42},"ann":"{v : (Data.Heap.Binominal.Tree a) | v == t2}","ident":"t2","stop":{"line":314,"column":44}},{"start":{"line":314,"column":46},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}","ident":"lq_anf$##7205759403792805022","stop":{"line":314,"column":64}},{"start":{"line":314,"column":54},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}","ident":"ts1'","stop":{"line":314,"column":58}},{"start":{"line":314,"column":59},"ann":"{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}","ident":"ts2'","stop":{"line":314,"column":63}},{"start":{"line":330,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}","ident":"Data.Heap.Binominal.heapSort","stop":{"line":330,"column":9}},{"start":{"line":330,"column":22},"ann":"forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}","ident":"_","stop":{"line":330,"column":24}},{"start":{"line":332,"column":8},"ann":"a","ident":"minElt","stop":{"line":332,"column":14}},{"start":{"line":332,"column":16},"ann":"(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})","ident":"h'","stop":{"line":332,"column":18}},{"start":{"line":332,"column":22},"ann":"(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))","ident":"_","stop":{"line":332,"column":34}},{"start":{"line":332,"column":33},"ann":"{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}","ident":"ds_d2VY","stop":{"line":332,"column":34}},{"start":{"line":333,"column":3},"ann":"{VV : a | VV == minElt}","ident":"minElt","stop":{"line":333,"column":9}},{"start":{"line":333,"column":12},"ann":"{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}","ident":"lq_anf$##7205759403792805083","stop":{"line":333,"column":23}},{"start":{"line":333,"column":21},"ann":"{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}","ident":"h'","stop":{"line":333,"column":23}},{"start":{"line":337,"column":1},"ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}","ident":"Data.Heap.Binominal.sortUsingHeap","stop":{"line":337,"column":14}},{"start":{"line":337,"column":17},"ann":"x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}","ident":"lq_anf$##7205759403792805084","stop":{"line":337,"column":25}},{"start":{"line":337,"column":28},"ann":"x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}","ident":"lq_anf$##7205759403792805085","stop":{"line":337,"column":36}}],"errors":[{"start":{"line":314,"column":25},"stop":{"line":314,"column":64},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.size ?c + Data.Heap.Binominal.sumSizeList ?a\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.sumSizeList ts1 + Data.Heap.Binominal.sumSizeList ?b}\n \n  In Context\n    ts1 : {ts1 : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts1 >= 0\n                                                  && len ts1 >= 0}\n     \n    ?c : {?c : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size ?c == Data.Heap.Binominal.size t1 + Data.Heap.Binominal.size t2}\n     \n    ts2' : {ts2' : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts2' >= 0\n                                                    && len ts2' >= 0}\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    t1 : (Data.Heap.Binominal.Tree a)\n     \n    t2 : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a == Data.Heap.Binominal.sumSizeList ts1' + Data.Heap.Binominal.sumSizeList ts2'\n                                                && Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}\n     \n    ts1' : {ts1' : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts1' >= 0\n                                                    && len ts1' >= 0}"},{"start":{"line":278,"column":18},"stop":{"line":278,"column":25},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ?a\n                                                                               && x_Tuple21 v == t\n                                                                               && snd v == ?a\n                                                                               && fst v == t}\n \n  not a subtype of Required type\n    VV : {VV : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | Data.Heap.Binominal.root (fst VV) <= VV})]) | Data.Heap.Binominal.size (fst VV) + Data.Heap.Binominal.sumSizeList (snd VV) == Data.Heap.Binominal.sumSizeList ?b}\n \n  In Context\n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | 0 < len ?b\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts ?a)\n                                                && len ?a == 0\n                                                && Data.Heap.Binominal.mapSize ?a == GHC.Types.[]\n                                                && Data.Heap.Binominal.sumPositives ?a == 0\n                                                && Data.Heap.Binominal.len ?a == 0\n                                                && Data.Heap.Binominal.sumSizeList ?a == 0\n                                                && Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":175,"column":1},"stop":{"line":175,"column":35},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : (Data.Heap.Binominal.Heap a) | Data.Heap.Binominal.unheap v == ?e\n                                             && Data.Heap.Binominal.heapSize v == Data.Heap.Binominal.sumSizeList ?e\n                                             && Data.Heap.Binominal.heapSize v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : (Data.Heap.Binominal.Heap a) | Data.Heap.Binominal.heapSize VV == 1}\n \n  In Context\n    ?h : {?h : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts ?h)\n                                                && len ?h == 0\n                                                && Data.Heap.Binominal.mapSize ?h == GHC.Types.[]\n                                                && Data.Heap.Binominal.sumPositives ?h == 0\n                                                && Data.Heap.Binominal.len ?h == 0\n                                                && Data.Heap.Binominal.sumSizeList ?h == 0\n                                                && Data.Heap.Binominal.sumSizeList ?h >= 0\n                                                && len ?h >= 0}\n     \n    ?e : {?e : [(Data.Heap.Binominal.Tree a)] | tail ?e == ?b\n                                                && head ?e == ?a\n                                                && listElts ?e == Set_cup (Set_sng ?a) (listElts ?b)\n                                                && len ?e == 1 + len ?b\n                                                && Data.Heap.Binominal.mapSize ?e == GHC.Types.: (Data.Heap.Binominal.size ?a) (Data.Heap.Binominal.mapSize ?b)\n                                                && Data.Heap.Binominal.sumPositives ?e == ?a + Data.Heap.Binominal.sumPositives ?b\n                                                && Data.Heap.Binominal.len ?e == 1 + Data.Heap.Binominal.len ?b\n                                                && Data.Heap.Binominal.sumSizeList ?e == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: ?a ?b))\n                                                && Data.Heap.Binominal.sumSizeList ?e >= 0\n                                                && len ?e >= 0}\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts ?b)\n                                                && len ?b == 0\n                                                && Data.Heap.Binominal.mapSize ?b == GHC.Types.[]\n                                                && Data.Heap.Binominal.sumPositives ?b == 0\n                                                && Data.Heap.Binominal.len ?b == 0\n                                                && Data.Heap.Binominal.sumSizeList ?b == 0\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    x : a\n     \n    ?a : {?a : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size ?a == 1\n                                              && Data.Heap.Binominal.subtrees ?a == ?h\n                                              && Data.Heap.Binominal.root ?a == x\n                                              && Data.Heap.Binominal.rank ?a == 0}"},{"start":{"line":258,"column":33},"stop":{"line":258,"column":62},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.sumSizeList xs + Data.Heap.Binominal.sumSizeList ?b\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.sumSizeList ?a + Data.Heap.Binominal.sumSizeList acc}\n \n  In Context\n    xs : {v : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | tail ?b == acc\n                                                && head ?b == x\n                                                && listElts ?b == Set_cup (Set_sng x) (listElts acc)\n                                                && len ?b == 1 + len acc\n                                                && Data.Heap.Binominal.mapSize ?b == GHC.Types.: (Data.Heap.Binominal.size x) (Data.Heap.Binominal.mapSize acc)\n                                                && Data.Heap.Binominal.sumPositives ?b == x + Data.Heap.Binominal.sumPositives acc\n                                                && Data.Heap.Binominal.len ?b == 1 + Data.Heap.Binominal.len acc\n                                                && Data.Heap.Binominal.sumSizeList ?b == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: x acc))\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    x : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}\n     \n    acc : {acc : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList acc >= 0\n                                                  && len acc >= 0}"},{"start":{"line":313,"column":25},"stop":{"line":313,"column":45},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | tail v == ?b\n                                               && head v == t2\n                                               && listElts v == Set_cup (Set_sng t2) (listElts ?b)\n                                               && len v == 1 + len ?b\n                                               && Data.Heap.Binominal.mapSize v == GHC.Types.: (Data.Heap.Binominal.size t2) (Data.Heap.Binominal.mapSize ?b)\n                                               && Data.Heap.Binominal.sumPositives v == t2 + Data.Heap.Binominal.sumPositives ?b\n                                               && Data.Heap.Binominal.len v == 1 + Data.Heap.Binominal.len ?b\n                                               && Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t2 ?b))\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.sumSizeList ts1 + Data.Heap.Binominal.sumSizeList ?a}\n \n  In Context\n    ts1 : {ts1 : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts1 >= 0\n                                                  && len ts1 >= 0}\n     \n    ts2' : {ts2' : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts2' >= 0\n                                                    && len ts2' >= 0}\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?b == Data.Heap.Binominal.sumSizeList ts1 + Data.Heap.Binominal.sumSizeList ts2'\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    t2 : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":194,"column":24},"stop":{"line":194,"column":47},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.size ?b + Data.Heap.Binominal.sumSizeList ts'\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.size t + Data.Heap.Binominal.sumSizeList ?a}\n \n  In Context\n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?b : {?b : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size ?b == Data.Heap.Binominal.size t + Data.Heap.Binominal.size t'}\n     \n    ts' : {ts' : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts' >= 0\n                                                  && len ts' >= 0}\n     \n    t' : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":159,"column":40},"stop":{"line":159,"column":51},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : GHC.Types.Int | v == (1 + Data.Heap.Binominal.sumSizeList ?h) + (1 + Data.Heap.Binominal.sumSizeList ?a)}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Int | 1 <= VV\n                               && VV == 1 + Data.Heap.Binominal.sumSizeList ?e}\n \n  In Context\n    t2BoundedByX1 : {t2BoundedByX1 : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size t2BoundedByX1 == Data.Heap.Binominal.size t2BoundedByX2}\n     \n    ?i : a\n     \n    ?c : {?c : GHC.Types.Int | ?c >= 0}\n     \n    t2BoundedByX2 : {t2BoundedByX2 : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size t2BoundedByX2 == Data.Heap.Binominal.size t2}\n     \n    ?h : {?h : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?h >= 0\n                                                && len ?h >= 0}\n     \n    ?e : {?e : [(Data.Heap.Binominal.Tree a)] | tail ?e == ?h\n                                                && head ?e == t2BoundedByX1\n                                                && listElts ?e == Set_cup (Set_sng t2BoundedByX1) (listElts ?h)\n                                                && len ?e == 1 + len ?h\n                                                && Data.Heap.Binominal.mapSize ?e == GHC.Types.: (Data.Heap.Binominal.size t2BoundedByX1) (Data.Heap.Binominal.mapSize ?h)\n                                                && Data.Heap.Binominal.sumPositives ?e == t2BoundedByX1 + Data.Heap.Binominal.sumPositives ?h\n                                                && Data.Heap.Binominal.len ?e == 1 + Data.Heap.Binominal.len ?h\n                                                && Data.Heap.Binominal.sumSizeList ?e == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t2BoundedByX1 ?h))\n                                                && Data.Heap.Binominal.sumSizeList ?e >= 0\n                                                && len ?e >= 0}\n     \n    t2 : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":291,"column":5},"stop":{"line":292,"column":17},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ?c\n                                                                               && x_Tuple21 v == fst ?a\n                                                                               && snd v == ?c\n                                                                               && fst v == fst ?a}\n \n  not a subtype of Required type\n    VV : {VV : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | Data.Heap.Binominal.root (fst VV) <= VV})]) | Data.Heap.Binominal.size (fst VV) + Data.Heap.Binominal.sumSizeList (snd VV) == Data.Heap.Binominal.sumSizeList ?b}\n \n  In Context\n    hd : {hd : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size hd == Data.Heap.Binominal.size tBounded}\n     \n    tBounded : {tBounded : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size tBounded == Data.Heap.Binominal.size t}\n     \n    ?c : {?c : [(Data.Heap.Binominal.Tree a)] | tail ?c == snd ?a\n                                                && head ?c == hd\n                                                && listElts ?c == Set_cup (Set_sng hd) (listElts (snd ?a))\n                                                && len ?c == 1 + len (snd ?a)\n                                                && Data.Heap.Binominal.mapSize ?c == GHC.Types.: (Data.Heap.Binominal.size hd) (Data.Heap.Binominal.mapSize (snd ?a))\n                                                && Data.Heap.Binominal.sumPositives ?c == hd + Data.Heap.Binominal.sumPositives (snd ?a)\n                                                && Data.Heap.Binominal.len ?c == 1 + Data.Heap.Binominal.len (snd ?a)\n                                                && Data.Heap.Binominal.sumSizeList ?c == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: hd (snd ?a)))\n                                                && Data.Heap.Binominal.sumSizeList ?c >= 0\n                                                && len ?c >= 0}\n     \n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | 0 < len ?b\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    ?d : {?d : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?d >= 0\n                                                && len ?d >= 0}\n     \n    ?a : {?a : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | Data.Heap.Binominal.size (fst ?a) + Data.Heap.Binominal.sumSizeList (snd ?a) == Data.Heap.Binominal.sumSizeList ?d}"},{"start":{"line":287,"column":5},"stop":{"line":289,"column":15},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ?a\n                                                                               && x_Tuple21 v == t\n                                                                               && snd v == ?a\n                                                                               && fst v == t}\n \n  not a subtype of Required type\n    VV : {VV : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | Data.Heap.Binominal.root (fst VV) <= VV})]) | Data.Heap.Binominal.size (fst VV) + Data.Heap.Binominal.sumSizeList (snd VV) == Data.Heap.Binominal.sumSizeList ?c}\n \n  In Context\n    hd : {hd : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size hd == Data.Heap.Binominal.size tBounded'}\n     \n    ?c : {?c : [(Data.Heap.Binominal.Tree a)] | 0 < len ?c\n                                                && Data.Heap.Binominal.sumSizeList ?c >= 0\n                                                && len ?c >= 0}\n     \n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?b : {?b : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | Data.Heap.Binominal.size (fst ?b) + Data.Heap.Binominal.sumSizeList (snd ?b) == Data.Heap.Binominal.sumSizeList ?d}\n     \n    tBounded' : {tBounded' : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size tBounded' == Data.Heap.Binominal.size (fst ?b)}\n     \n    tl : {tl : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList tl == Data.Heap.Binominal.sumSizeList (snd ?b)\n                                                && Data.Heap.Binominal.sumSizeList tl >= 0\n                                                && len tl >= 0}\n     \n    ?d : {?d : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?d >= 0\n                                                && len ?d >= 0}\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | tail ?a == tl\n                                                && head ?a == hd\n                                                && listElts ?a == Set_cup (Set_sng hd) (listElts tl)\n                                                && len ?a == 1 + len tl\n                                                && Data.Heap.Binominal.mapSize ?a == GHC.Types.: (Data.Heap.Binominal.size hd) (Data.Heap.Binominal.mapSize tl)\n                                                && Data.Heap.Binominal.sumPositives ?a == hd + Data.Heap.Binominal.sumPositives tl\n                                                && Data.Heap.Binominal.len ?a == 1 + Data.Heap.Binominal.len tl\n                                                && Data.Heap.Binominal.sumSizeList ?a == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: hd tl))\n                                                && Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":312,"column":25},"stop":{"line":312,"column":45},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | tail v == ?a\n                                               && head v == t1\n                                               && listElts v == Set_cup (Set_sng t1) (listElts ?a)\n                                               && len v == 1 + len ?a\n                                               && Data.Heap.Binominal.mapSize v == GHC.Types.: (Data.Heap.Binominal.size t1) (Data.Heap.Binominal.mapSize ?a)\n                                               && Data.Heap.Binominal.sumPositives v == t1 + Data.Heap.Binominal.sumPositives ?a\n                                               && Data.Heap.Binominal.len v == 1 + Data.Heap.Binominal.len ?a\n                                               && Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t1 ?a))\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.sumSizeList ts1 + Data.Heap.Binominal.sumSizeList ?b}\n \n  In Context\n    ts1 : {ts1 : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts1 >= 0\n                                                  && len ts1 >= 0}\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    t1 : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a == Data.Heap.Binominal.sumSizeList ts1' + Data.Heap.Binominal.sumSizeList ?b\n                                                && Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}\n     \n    ts1' : {ts1' : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ts1' >= 0\n                                                    && len ts1' >= 0}"},{"start":{"line":193,"column":24},"stop":{"line":193,"column":30},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | tail v == ?a\n                                               && head v == t\n                                               && listElts v == Set_cup (Set_sng t) (listElts ?a)\n                                               && len v == 1 + len ?a\n                                               && Data.Heap.Binominal.mapSize v == GHC.Types.: (Data.Heap.Binominal.size t) (Data.Heap.Binominal.mapSize ?a)\n                                               && Data.Heap.Binominal.sumPositives v == t + Data.Heap.Binominal.sumPositives ?a\n                                               && Data.Heap.Binominal.len v == 1 + Data.Heap.Binominal.len ?a\n                                               && Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t ?a))\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.size t + Data.Heap.Binominal.sumSizeList ?a}\n \n  In Context\n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":163,"column":40},"stop":{"line":163,"column":51},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : GHC.Types.Int | v == (1 + Data.Heap.Binominal.sumSizeList ?i) + (1 + Data.Heap.Binominal.sumSizeList ?a)}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Int | 1 <= VV\n                               && VV == 1 + Data.Heap.Binominal.sumSizeList ?g}\n \n  In Context\n    t1BoundedByX1 : {t1BoundedByX1 : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size t1BoundedByX1 == Data.Heap.Binominal.size t1}\n     \n    ?g : {?g : [(Data.Heap.Binominal.Tree a)] | tail ?g == ?a\n                                                && head ?g == t1BoundedByX2\n                                                && listElts ?g == Set_cup (Set_sng t1BoundedByX2) (listElts ?a)\n                                                && len ?g == 1 + len ?a\n                                                && Data.Heap.Binominal.mapSize ?g == GHC.Types.: (Data.Heap.Binominal.size t1BoundedByX2) (Data.Heap.Binominal.mapSize ?a)\n                                                && Data.Heap.Binominal.sumPositives ?g == t1BoundedByX2 + Data.Heap.Binominal.sumPositives ?a\n                                                && Data.Heap.Binominal.len ?g == 1 + Data.Heap.Binominal.len ?a\n                                                && Data.Heap.Binominal.sumSizeList ?g == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t1BoundedByX2 ?a))\n                                                && Data.Heap.Binominal.sumSizeList ?g >= 0\n                                                && len ?g >= 0}\n     \n    ?i : {?i : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?i >= 0\n                                                && len ?i >= 0}\n     \n    t1BoundedByX2 : {t1BoundedByX2 : (Data.Heap.Binominal.Tree a) | Data.Heap.Binominal.size t1BoundedByX2 == Data.Heap.Binominal.size t1BoundedByX1}\n     \n    ?h : a\n     \n    ?e : {?e : GHC.Types.Int | ?e >= 0}\n     \n    t1 : (Data.Heap.Binominal.Tree a)\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"},{"start":{"line":191,"column":16},"stop":{"line":191,"column":19},"message":"Error: Liquid Type Mismatch\n  Inferred type\n    VV : {v : [(Data.Heap.Binominal.Tree a)] | tail v == ?b\n                                               && head v == t\n                                               && listElts v == Set_cup (Set_sng t) (listElts ?b)\n                                               && len v == 1 + len ?b\n                                               && Data.Heap.Binominal.mapSize v == GHC.Types.: (Data.Heap.Binominal.size t) (Data.Heap.Binominal.mapSize ?b)\n                                               && Data.Heap.Binominal.sumPositives v == t + Data.Heap.Binominal.sumPositives ?b\n                                               && Data.Heap.Binominal.len v == 1 + Data.Heap.Binominal.len ?b\n                                               && Data.Heap.Binominal.sumSizeList v == Data.Heap.Binominal.sumPositives (Data.Heap.Binominal.mapSize (GHC.Types.: t ?b))\n                                               && Data.Heap.Binominal.sumSizeList v >= 0\n                                               && len v >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList VV == Data.Heap.Binominal.size t + Data.Heap.Binominal.sumSizeList ?a}\n \n  In Context\n    t : (Data.Heap.Binominal.Tree a)\n     \n    ?b : {?b : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts ?b)\n                                                && len ?b == 0\n                                                && Data.Heap.Binominal.mapSize ?b == GHC.Types.[]\n                                                && Data.Heap.Binominal.sumPositives ?b == 0\n                                                && Data.Heap.Binominal.len ?b == 0\n                                                && Data.Heap.Binominal.sumSizeList ?b == 0\n                                                && Data.Heap.Binominal.sumSizeList ?b >= 0\n                                                && len ?b >= 0}\n     \n    ?a : {?a : [(Data.Heap.Binominal.Tree a)] | Data.Heap.Binominal.sumSizeList ?a >= 0\n                                                && len ?a >= 0}"}]}