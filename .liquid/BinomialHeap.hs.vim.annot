1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
46:1-46:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
46:18-46:19::lq_anf$##7205759403792805991 :: "{v : GHC.Prim.Int# | v == 0}"
47:22-47:28::lq_anf$##7205759403792805992 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
47:27-47:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
47:31-47:45::lq_anf$##7205759403792805993 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0\n                     && len xs <= v}"
47:43-47:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
58:1-58:12::Data.Heap.Binominal.maxRankList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == maxRankList x1\n                                                           && VV >= 0}"
58:18-58:19::lq_anf$##7205759403792805999 :: "{v : GHC.Prim.Int# | v == 0}"
60:7-60:8::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x}"
60:11-60:17::_ :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x}"
60:16-60:17::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
61:7-61:9::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0}"
61:12-61:26::Data.Heap.Binominal.maxRankList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == maxRankList x1\n                                                           && VV >= 0}"
61:24-61:26::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
62:6-62:7::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x\n                     && v == r}"
62:10-62:12::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0\n                     && v == r'}"
62:18-62:20::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0\n                     && v == r'}"
62:26-62:27::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x\n                     && v == r}"
72:1-72:8::Data.Heap.Binominal.lubRank :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == lubRank x1\n                                                           && VV >= 0}"
72:14-72:15::lq_anf$##7205759403792806006 :: "{v : GHC.Prim.Int# | v == 0}"
73:14-73:15::lq_anf$##7205759403792806004 :: "GHC.Types.Int"
73:18-73:32::lq_anf$##7205759403792806005 :: "{v : GHC.Types.Int | v >= 0}"
73:30-73:32::ds_d3cv :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
78:1-78:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0\n                                                         && len (unheap x1) <= VV}"
78:22-78:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
78:34-78:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
83:1-83:5::Data.Heap.Binominal.pow2 :: "{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 0}"
83:6-83:7::n :: "{VV : GHC.Types.Int | VV >= 0}"
83:13-83:14::n :: "{v : GHC.Types.Int | v >= 0\n                     && v == n}"
83:18-83:19::lq_anf$##7205759403792806010 :: "GHC.Types.Int"
83:25-83:26::lq_anf$##7205759403792806019 :: "{v : GHC.Prim.Int# | v == 1}"
83:32-83:33::lq_anf$##7205759403792806014 :: "GHC.Types.Int"
83:36-83:48::lq_anf$##7205759403792806018 :: "{VV : GHC.Types.Int | VV >= 0}"
83:41-83:48::lq_anf$##7205759403792806017 :: "GHC.Types.Int"
83:42-83:43::n :: "{v : GHC.Types.Int | v >= 0\n                     && v == n}"
83:46-83:47::lq_anf$##7205759403792806016 :: "GHC.Types.Int"
115:1-115:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
116:3-116:46::Data.Heap.Binominal.Node :: "forall a .\nx1:a -> x2:[(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> x3:{v : GHC.Types.Int | v >= 0\n                                                                                       && v == len x2} -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                                  && v == 1 + sumSizeList x2} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                                     && rank v == x3\n                                                                                                                                                                                                     && subtrees v == x2\n                                                                                                                                                                                                     && root v == x1}"
116:14-116:15::ds_d39c :: "{v : GHC.Types.Int | v >= 0}"
116:22-116:23::ds_d39a :: "a"
116:34-116:36::ds_d39b :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
116:43-116:45::ds_d39d :: "{v : GHC.Types.Int | 1 <= v}"
121:1-121:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
121:30-121:31::x :: "a"
121:32-121:33::y :: "{VV : a | x <= VV}"
121:34-121:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
125:1-125:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
125:34-125:35::x :: "a"
125:36-125:37::y :: "{VV : a | x <= VV}"
125:38-125:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
129:1-129:17::Data.Heap.Binominal.sublistSizeLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> x2:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV >= 0\n                                                                                              && VV == size x1 + sumSizeList x2\n                                                                                              && sumSizeList x2 < VV}"
129:18-129:19::x :: "(Data.Heap.Binominal.Tree a)"
129:20-129:22::xs :: "[(Data.Heap.Binominal.Tree a)]"
130:3-130:22::lq_anf$##7205759403792806087 :: "GHC.Types.Int -> GHC.Types.Int"
130:10-130:22::lq_anf$##7205759403792806086 :: "GHC.Types.Bool"
130:11-130:12::lq_anf$##7205759403792806084 :: "GHC.Types.Int"
130:15-130:21::lq_anf$##7205759403792806085 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
130:20-130:21::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
131:3-131:23::lq_anf$##7205759403792806089 :: "{v : GHC.Types.Int | v >= 0}"
131:15-131:23::lq_anf$##7205759403792806088 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == xs\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts xs)\n                                      && len v == 1 + len xs\n                                      && lubRank v == 1 + maxRankList (: x xs)\n                                      && sumSizeList v == size x + sumSizeList xs\n                                      && maxRankList v == (if rank x < maxRankList xs then maxRankList xs else rank x)}"
131:16-131:17::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
131:20-131:22::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
138:1-138:23::Data.Heap.Binominal.subtreeTransitiveLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                     && x1 <= VV} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x3}]"
138:26-138:28::ts :: "[(Data.Heap.Binominal.Tree a)]"
142:1-142:14::Data.Heap.Binominal.consTreeLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : (Data.Heap.Binominal.Tree a) | size VV <= x1} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}]"
142:17-142:18::t :: "(Data.Heap.Binominal.Tree a)"
142:19-142:21::ts :: "[(Data.Heap.Binominal.Tree a)]"
142:24-142:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
142:28-142:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
146:1-146:10::Data.Heap.Binominal.testTrick :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [{t : (Data.Heap.Binominal.Tree a) | size t < x1}] | VV /= []} -> {t : (Data.Heap.Binominal.Tree a) | size t < x1}"
146:22-146:23::h :: "{v : (Data.Heap.Binominal.Tree a) | v == h}"
150:1-150:24::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
150:30-150:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
152:7-152:9::ih :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
152:12-152:38::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
152:36-152:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
153:7-153:14::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
153:17-153:38::_ :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
153:34-153:35::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
153:36-153:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
154:7-154:13::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
154:16-154:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
154:28-154:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
155:7-155:22::refinedSubtrees :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
155:25-155:65::_ :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
155:48-155:54::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v\n                     && v == sizets}"
155:55-155:57::ih :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | lubRank v >= 0\n                                                                       && sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && maxRankList v >= 0\n                                                                       && v == ih}"
155:58-155:65::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
156:17-156:24::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
156:25-156:26::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
156:27-156:42::refinedSubtrees :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}] | lubRank v >= 0\n                                                                && sumSizeList v >= 0\n                                                                && len v >= 0\n                                                                && maxRankList v >= 0\n                                                                && v == refinedSubtrees}"
183:1-183:33::Data.Heap.Binominal.strictTransitivitySizeBoundLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                       && x1 < VV} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV < x3}]"
183:36-183:38::ts :: "[(Data.Heap.Binominal.Tree a)]"
188:1-188:9::Data.Heap.Binominal.eltsTree :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Set.Internal.Set a)"
188:10-188:11::t :: "(Data.Heap.Binominal.Tree a)"
189:7-189:25::boundBySumSizeList :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
189:28-189:56::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
189:53-189:55::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
190:7-190:25::boundByOverallSize :: "[(Data.Heap.Binominal.Tree a)]"
190:28-190:105::_ :: "[(Data.Heap.Binominal.Tree a)]"
190:61-190:77::lq_anf$##7205759403792806092 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
190:74-190:76::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
190:78-190:96::boundBySumSizeList :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | lubRank v >= 0\n                                                                       && sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && maxRankList v >= 0\n                                                                       && v == boundBySumSizeList}"
190:97-190:105::lq_anf$##7205759403792806093 :: "{v : GHC.Types.Int | 1 <= v}"
190:103-190:104::lq_anf$##7205759403792806091 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && rank v == r\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && v == Node x ts r sz}"
191:3-191:35::lq_anf$##7205759403792806097 :: "(Data.Set.Internal.Set a) -> (Data.Set.Internal.Set a)"
191:10-191:35::lq_anf$##7205759403792806096 :: "GHC.Types.Bool"
191:11-191:25::lq_anf$##7205759403792806094 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
191:23-191:25::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
191:28-191:34::lq_anf$##7205759403792806095 :: "{v : GHC.Types.Int | 1 <= v}"
191:33-191:34::lq_anf$##7205759403792806091 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && rank v == r\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && v == Node x ts r sz}"
192:3-192:57::lq_anf$##7205759403792806100 :: "(Data.Set.Internal.Set a)"
192:11-192:26::lq_anf$##7205759403792806098 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng x}"
192:24-192:25::x :: "{VV : a | VV == x}"
192:27-192:57::lq_anf$##7205759403792806099 :: "(Data.Set.Internal.Set a)"
192:38-192:56::boundByOverallSize :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == boundByOverallSize}"
197:1-197:10::Data.Heap.Binominal.eltsTrees :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> (Data.Set.Internal.Set a)"
197:16-197:23::_ :: "forall a . {v : (Data.Set.Internal.Set a) | Set_emp v}"
198:20-198:55::$dOrd_a2ZO :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2ZO}"
198:28-198:40::lq_anf$##7205759403792806102 :: "(Data.Set.Internal.Set a)"
198:38-198:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
198:41-198:55::lq_anf$##7205759403792806103 :: "(Data.Set.Internal.Set a)"
198:52-198:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
203:1-203:12::Data.Heap.Binominal.mapEltsTree :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> [(Data.Set.Internal.Set a)]"
203:18-203:20::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
204:22-204:32::lq_anf$##7205759403792806105 :: "(Data.Set.Internal.Set a)"
204:31-204:32::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
204:35-204:49::lq_anf$##7205759403792806106 :: "[(Data.Set.Internal.Set a)]"
204:47-204:49::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
213:1-213:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
213:10-213:11::x :: "a"
217:1-217:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
217:23-217:24::x :: "a"
221:1-221:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
221:27-221:28::x :: "a"
225:1-225:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
225:6-225:8::t1 :: "(Data.Heap.Binominal.Tree a)"
225:30-225:32::t2 :: "(Data.Heap.Binominal.Tree a)"
226:5-226:7::x1 :: "{VV : a | VV == x1}"
226:11-226:13::x2 :: "{VV : a | VV == x2}"
227:9-227:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
227:25-227:55::_ :: "(Data.Heap.Binominal.Tree a)"
227:53-227:55::lq_anf$##7205759403792806022 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2\n                                    && size v == sz2\n                                    && rank v == r2\n                                    && subtrees v == ts2\n                                    && root v == v\n                                    && v == Node v ts2 r2 sz2}"
228:9-228:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2}"
228:25-228:73::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2}"
228:54-228:56::x1 :: "{VV : a | VV == x1}"
228:57-228:59::x2 :: "{VV : a | VV == x2}"
228:60-228:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
229:10-229:12::x1 :: "{VV : a | VV == x1}"
229:13-229:32::lq_anf$##7205759403792806030 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == ts1\n                                      && head v == t2BoundedByX1\n                                      && listElts v == Set_cup (Set_sng t2BoundedByX1) (listElts ts1)\n                                      && len v == 1 + len ts1\n                                      && lubRank v == 1 + maxRankList (: t2BoundedByX1 ts1)\n                                      && sumSizeList v == size t2BoundedByX1 + sumSizeList ts1\n                                      && maxRankList v == (if rank t2BoundedByX1 < maxRankList ts1 then maxRankList ts1 else rank t2BoundedByX1)}"
229:14-229:27::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2\n                                                      && v == t2BoundedByX1}"
229:28-229:31::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | lubRank v >= 0\n                                                        && sumSizeList v >= 0\n                                                        && len v >= 0\n                                                        && maxRankList v >= 0\n                                                        && v == ts1}"
229:33-229:41::lq_anf$##7205759403792806033 :: "GHC.Types.Int"
229:34-229:35::lq_anf$##7205759403792806032 :: "GHC.Types.Int"
229:38-229:40::r1 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len ts1\n                     && v == r1}"
229:42-229:53::lq_anf$##7205759403792806034 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
229:43-229:46::sz1 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList ts1\n                     && v == sz1}"
229:49-229:52::sz2 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList ts2\n                     && v == sz2}"
231:9-231:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
231:25-231:55::_ :: "(Data.Heap.Binominal.Tree a)"
231:53-231:55::lq_anf$##7205759403792806021 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1\n                                    && size v == sz1\n                                    && rank v == r1\n                                    && subtrees v == ts1\n                                    && root v == x1\n                                    && v == Node x1 ts1 r1 sz1}"
232:9-232:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1}"
232:25-232:73::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1}"
232:54-232:56::x2 :: "{VV : a | VV == x2}"
232:57-232:59::x1 :: "{VV : a | VV == x1}"
232:60-232:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
233:10-233:12::x2 :: "{VV : a | VV == x2}"
233:13-233:32::lq_anf$##7205759403792806025 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == ts2\n                                      && head v == t1BoundedByX2\n                                      && listElts v == Set_cup (Set_sng t1BoundedByX2) (listElts ts2)\n                                      && len v == 1 + len ts2\n                                      && lubRank v == 1 + maxRankList (: t1BoundedByX2 ts2)\n                                      && sumSizeList v == size t1BoundedByX2 + sumSizeList ts2\n                                      && maxRankList v == (if rank t1BoundedByX2 < maxRankList ts2 then maxRankList ts2 else rank t1BoundedByX2)}"
233:14-233:27::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1\n                                                      && v == t1BoundedByX2}"
233:28-233:31::ts2 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] | lubRank v >= 0\n                                                        && sumSizeList v >= 0\n                                                        && len v >= 0\n                                                        && maxRankList v >= 0\n                                                        && v == ts2}"
233:33-233:41::lq_anf$##7205759403792806028 :: "GHC.Types.Int"
233:34-233:35::lq_anf$##7205759403792806027 :: "GHC.Types.Int"
233:38-233:40::r2 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len ts2\n                     && v == r2}"
233:42-233:53::lq_anf$##7205759403792806029 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
233:43-233:46::sz1 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList ts1\n                     && v == sz1}"
233:49-233:52::sz2 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList ts2\n                     && v == sz2}"
237:1-237:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
237:14-237:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
241:1-241:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
241:6-241:7::h :: "(Data.Heap.Binominal.Heap a)"
241:10-241:20::lq_anf$##7205759403792805995 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0\n                     && len (unheap h) <= v}"
241:19-241:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
241:24-241:25::lq_anf$##7205759403792805997 :: "GHC.Types.Int"
245:1-245:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
245:11-245:12::x :: "a"
245:20-245:35::lq_anf$##7205759403792806117 :: "[(Data.Heap.Binominal.Tree a)]"
245:21-245:34::lq_anf$##7205759403792806115 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
245:26-245:27::x :: "{VV : a | VV == x}"
245:28-245:30::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
245:31-245:32::lq_anf$##7205759403792806112 :: "GHC.Types.Int"
245:33-245:34::lq_anf$##7205759403792806114 :: "GHC.Types.Int"
257:1-257:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
257:8-257:9::x :: "a"
257:22-257:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
257:27-257:55::lq_anf$##7205759403792806049 :: "[(Data.Heap.Binominal.Tree a)]"
257:36-257:51::lq_anf$##7205759403792806048 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
257:42-257:43::x :: "{VV : a | VV == x}"
257:44-257:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
257:47-257:48::lq_anf$##7205759403792806045 :: "GHC.Types.Int"
257:49-257:50::lq_anf$##7205759403792806047 :: "GHC.Types.Int"
257:52-257:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
261:1-261:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
261:9-261:10::t :: "(Data.Heap.Binominal.Tree a)"
261:16-261:19::lq_anf$##7205759403792806036 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && lubRank v == 0\n                                      && sumSizeList v == 0\n                                      && maxRankList v == 0}"
261:17-261:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
263:5-263:11::lq_anf$##7205759403792806037 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t)\n                     && v == rank t}"
263:10-263:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
263:14-263:21::lq_anf$##7205759403792806038 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t')\n                     && v == rank t'}"
263:19-263:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
263:24-263:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
263:28-263:30::ds_d39C :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
264:24-264:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
264:32-264:43::lq_anf$##7205759403792806041 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
264:38-264:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
264:40-264:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
264:44-264:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts'}"
269:1-269:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
269:10-269:11::lq_anf$##7205759403792806119 :: "{v : GHC.Prim.Int# | v == 0}"
270:14-270:15::lq_anf$##7205759403792806121 :: "GHC.Types.Int"
270:18-270:24::lq_anf$##7205759403792806122 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
270:22-270:24::xs :: "{v : [a] | lubRank v >= 0\n           && sumSizeList v >= 0\n           && len v >= 0\n           && maxRankList v >= 0\n           && v == xs}"
274:1-274:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
274:15-274:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
275:19-275:41::$dOrd_a2S7 :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2S7}"
275:26-275:27::x :: "{VV : a | VV == x}"
275:28-275:41::lq_anf$##7205759403792806109 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
275:38-275:40::xs :: "{v : [a] | lubRank v >= 0\n           && sumSizeList v >= 0\n           && len v >= 0\n           && maxRankList v >= 0\n           && v == xs}"
317:1-317:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
317:11-317:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
317:18-317:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
317:24-317:34::lq_anf$##7205759403792806131 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
317:37-317:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
323:1-323:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
323:17-323:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
323:41-323:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
323:44-323:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
327:1-327:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
327:23-327:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
327:29-327:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == acc}"
328:33-328:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
328:52-328:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
328:55-328:62::lq_anf$##7205759403792806124 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && lubRank v == 1 + maxRankList (: x acc)\n                                      && sumSizeList v == size x + sumSizeList acc\n                                      && maxRankList v == (if rank x < maxRankList acc then maxRankList acc else rank x)}"
328:56-328:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
328:58-328:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == acc}"
332:1-332:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV\n                                                                                                       && sumSizeList VV == heapSize x1}"
332:34-332:36::lq_anf$##7205759403792806127 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
336:1-336:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
336:11-336:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
337:31-337:60::lq_anf$##7205759403792806136 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
337:42-337:60::lq_anf$##7205759403792806135 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
337:58-337:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
338:8-338:42::lq_anf$##7205759403792806140 :: "[(Data.Heap.Binominal.Tree a)]"
338:16-338:37::lq_anf$##7205759403792806139 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
338:33-338:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
338:38-338:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
342:1-342:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}"
342:12-342:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
343:36-343:65::lq_anf$##7205759403792806142 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
343:47-343:65::lq_anf$##7205759403792806141 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
343:63-343:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
344:4-344:10::minElt :: "{VV : a | VV == minElt}"
344:12-344:51::lq_anf$##7205759403792806147 :: "(Data.Heap.Binominal.Heap a)"
344:17-344:51::lq_anf$##7205759403792806146 :: "[(Data.Heap.Binominal.Tree a)]"
344:25-344:46::lq_anf$##7205759403792806145 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
344:42-344:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | lubRank v >= 0\n                                                            && sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && maxRankList v >= 0\n                                                            && v == ts1}"
344:47-344:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
348:1-348:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
348:18-348:25::lq_anf$##7205759403792806078 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && lubRank v == 0\n                                      && sumSizeList v == 0\n                                      && maxRankList v == 0}"
348:19-348:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
348:22-348:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
350:8-350:10::t' :: "(Data.Heap.Binominal.Tree a)"
350:12-350:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
350:19-350:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
350:30-350:32::ds_d3b3 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
351:7-351:8::x :: "{VV : a | VV == root t}"
351:11-351:17::_ :: "{VV : a | VV == root t}"
351:16-351:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
352:7-352:9::x' :: "{VV : a | VV == root t'}"
352:12-352:19::_ :: "{VV : a | VV == root t'}"
352:17-352:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
353:7-353:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
353:18-353:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
353:46-353:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
354:7-354:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
354:19-354:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
354:47-354:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
355:6-355:7::x :: "{VV : a | VV == root t\n          && VV == x}"
355:10-355:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
357:9-357:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
357:14-357:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
357:43-357:44::x :: "{VV : a | VV == root t\n          && VV == x}"
357:45-357:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
357:48-357:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
358:9-358:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
358:14-358:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
358:47-358:48::x :: "{VV : a | VV == root t\n          && VV == x}"
358:49-358:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
358:52-358:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && lubRank v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && maxRankList v >= 0\n                                                             && v == ts'}"
359:6-359:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
359:9-359:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
359:12-359:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == tl}"
361:9-361:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
361:14-361:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
361:43-361:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
361:46-361:47::x :: "{VV : a | VV == root t\n          && VV == x}"
361:48-361:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
362:6-362:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
362:10-362:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
362:13-362:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && lubRank v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && maxRankList v >= 0\n                                                             && v == ts'}"
375:1-375:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
375:31-375:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
375:36-375:52::lq_anf$##7205759403792806070 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
375:44-375:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
375:48-375:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
379:1-379:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
379:8-379:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
379:17-379:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
380:17-380:20::ds_d39Y :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
382:5-382:12::lq_anf$##7205759403792806054 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t1)\n                     && v == rank t1}"
382:10-382:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
382:15-382:22::lq_anf$##7205759403792806055 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t2)\n                     && v == rank t2}"
382:20-382:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
382:25-382:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
382:30-382:45::lq_anf$##7205759403792806065 :: "[(Data.Heap.Binominal.Tree a)]"
382:37-382:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1'}"
382:42-382:45::ds_d39Y :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
383:5-383:12::lq_anf$##7205759403792806058 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t2)\n                     && v == rank t2}"
383:10-383:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
383:15-383:22::lq_anf$##7205759403792806059 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t1)\n                     && v == rank t1}"
383:20-383:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
383:25-383:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
383:30-383:45::lq_anf$##7205759403792806064 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
383:37-383:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
383:41-383:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2'}"
384:25-384:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
384:33-384:45::lq_anf$##7205759403792806062 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
384:39-384:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
384:42-384:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
384:46-384:64::lq_anf$##7205759403792806063 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
384:54-384:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1'}"
384:59-384:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2'}"
400:1-400:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}"
400:22-400:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
402:8-402:14::minElt :: "a"
402:16-402:18::h' :: "(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})"
402:22-402:34::_ :: "(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))"
402:33-402:34::ds_d3bS :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
403:3-403:9::minElt :: "{VV : a | VV == minElt}"
403:12-403:23::lq_anf$##7205759403792806150 :: "{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}"
403:21-403:23::h' :: "{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}"
407:1-407:14::Data.Heap.Binominal.sortUsingHeap :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}"
407:17-407:25::lq_anf$##7205759403792806151 :: "x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}"
407:28-407:36::lq_anf$##7205759403792806152 :: "x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}"