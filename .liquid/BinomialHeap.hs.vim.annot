1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
42:1-42:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
42:18-42:19::lq_anf$##7205759403792804876 :: "{v : GHC.Prim.Int# | v == 0}"
43:22-43:28::lq_anf$##7205759403792804877 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
43:27-43:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
43:31-43:45::lq_anf$##7205759403792804878 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0}"
43:43-43:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
48:1-48:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}"
48:10-48:11::h :: "(Data.Heap.Binominal.Heap a)"
49:8-49:9::_ :: "{v : (Data.Heap.Binominal.Heap a) | v == h}"
50:16-50:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
50:28-50:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
76:1-76:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
77:3-77:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
77:14-77:15::ds_d2Ta :: "{v : GHC.Types.Int | v >= 0}"
77:22-77:23::ds_d2Tb :: "a"
77:34-77:36::ds_d2Tc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
77:43-77:45::ds_d2Td :: "{v : GHC.Types.Int | 1 <= v}"
82:1-82:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
82:30-82:31::x :: "a"
82:32-82:33::y :: "{VV : a | x <= VV}"
82:34-82:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
91:1-91:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
91:10-91:11::x :: "a"
96:1-96:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
96:6-96:8::t1 :: "(Data.Heap.Binominal.Tree a)"
96:59-96:61::t2 :: "(Data.Heap.Binominal.Tree a)"
97:5-97:7::ds_d2TB :: "a"
97:11-97:13::ds_d2TF :: "a"
98:9-98:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
98:25-98:55::_ :: "(Data.Heap.Binominal.Tree a)"
98:53-98:55::lq_anf$##7205759403792804885 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
99:9-99:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
99:25-99:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
99:54-99:56::ds_d2TB :: "a"
99:57-99:59::ds_d2TF :: "a"
99:60-99:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
100:10-100:16::lq_anf$##7205759403792804895 :: "GHC.Types.Int"
100:11-100:13::ds_d2TA :: "{v : GHC.Types.Int | v >= 0}"
100:14-100:15::lq_anf$##7205759403792804894 :: "GHC.Types.Int"
100:17-100:19::ds_d2TB :: "a"
100:20-100:39::lq_anf$##7205759403792804896 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
100:21-100:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
100:35-100:38::ds_d2TC :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
100:40-100:51::lq_anf$##7205759403792804897 :: "GHC.Types.Int"
100:41-100:44::ds_d2TD :: "{v : GHC.Types.Int | 1 <= v}"
100:47-100:50::ds_d2TH :: "{v : GHC.Types.Int | 1 <= v}"
102:9-102:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
102:25-102:55::_ :: "(Data.Heap.Binominal.Tree a)"
102:53-102:55::lq_anf$##7205759403792804884 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
103:9-103:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
103:25-103:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
103:54-103:56::ds_d2TF :: "a"
103:57-103:59::ds_d2TB :: "a"
103:60-103:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
104:10-104:16::lq_anf$##7205759403792804890 :: "GHC.Types.Int"
104:11-104:13::ds_d2TE :: "{v : GHC.Types.Int | v >= 0}"
104:14-104:15::lq_anf$##7205759403792804889 :: "GHC.Types.Int"
104:17-104:19::ds_d2TF :: "a"
104:20-104:39::lq_anf$##7205759403792804891 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
104:21-104:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
104:35-104:38::ds_d2TG :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
104:40-104:51::lq_anf$##7205759403792804892 :: "GHC.Types.Int"
104:41-104:44::ds_d2TD :: "{v : GHC.Types.Int | 1 <= v}"
104:47-104:50::ds_d2TH :: "{v : GHC.Types.Int | 1 <= v}"
108:1-108:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
108:14-108:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
113:1-113:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
113:6-113:7::h :: "(Data.Heap.Binominal.Heap a)"
113:10-113:20::lq_anf$##7205759403792804880 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}"
113:19-113:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
113:24-113:25::lq_anf$##7205759403792804882 :: "GHC.Types.Int"
117:1-117:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
117:11-117:12::x :: "a"
117:20-117:35::lq_anf$##7205759403792804944 :: "[(Data.Heap.Binominal.Tree a)]"
117:21-117:34::lq_anf$##7205759403792804942 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
117:26-117:27::lq_anf$##7205759403792804938 :: "GHC.Types.Int"
117:28-117:29::x :: "{VV : a | VV == x}"
117:30-117:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
117:33-117:34::lq_anf$##7205759403792804941 :: "GHC.Types.Int"
129:1-129:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
129:8-129:9::x :: "a"
129:22-129:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == sumSizeList x1}"
129:27-129:55::lq_anf$##7205759403792804912 :: "[(Data.Heap.Binominal.Tree a)]"
129:36-129:51::lq_anf$##7205759403792804911 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
129:42-129:43::lq_anf$##7205759403792804907 :: "GHC.Types.Int"
129:44-129:45::x :: "{VV : a | VV == x}"
129:46-129:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
129:49-129:50::lq_anf$##7205759403792804910 :: "GHC.Types.Int"
129:52-129:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
133:1-133:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
133:9-133:10::t :: "(Data.Heap.Binominal.Tree a)"
133:16-133:19::lq_anf$##7205759403792804899 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
133:17-133:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
135:5-135:11::lq_anf$##7205759403792804900 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
135:10-135:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
135:14-135:21::lq_anf$##7205759403792804901 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
135:19-135:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
135:24-135:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
135:28-135:30::ds_d2TK :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
136:24-136:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
136:32-136:43::lq_anf$##7205759403792804904 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
136:38-136:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
136:40-136:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
136:44-136:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
141:1-141:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
141:10-141:11::lq_anf$##7205759403792804946 :: "{v : GHC.Prim.Int# | v == 0}"
142:14-142:15::lq_anf$##7205759403792804948 :: "GHC.Types.Int"
142:18-142:24::lq_anf$##7205759403792804949 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
142:22-142:24::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
146:1-146:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
146:15-146:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
147:19-147:41::$dOrd_a2My :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2My}"
147:26-147:27::x :: "{VV : a | VV == x}"
147:28-147:41::lq_anf$##7205759403792804936 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
147:38-147:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
187:1-187:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe a)"
187:21-187:25::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
187:28-187:31::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
187:36-187:49::lq_anf$##7205759403792804967 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
187:47-187:49::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
201:1-201:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
202:8-202:21::lq_anf$##7205759403792804969 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
202:19-202:21::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
203:33-203:38::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
204:35-204:66::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == sumSizeList x1}"
204:40-204:66::lq_anf$##7205759403792804974 :: "[(Data.Heap.Binominal.Tree a)]"
204:48-204:61::lq_anf$##7205759403792804973 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == len ts1}"
204:57-204:60::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
204:62-204:65::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
208:1-208:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe (a, (Data.Heap.Binominal.Heap a)))"
208:24-208:31::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
209:24-209:48::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
209:26-209:27::m :: "a"
209:32-209:33::m :: "{VV : a | VV == m}"
209:35-209:46::lq_anf$##7205759403792804977 :: "(Data.Heap.Binominal.Heap a)"
209:45-209:46::ds_d2UV :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
209:53-209:62::lq_anf$##7205759403792804979 :: "(GHC.Maybe.Maybe a)"
209:61-209:62::ds_d2UV :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
213:1-213:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> (GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
213:17-213:24::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
215:8-215:21::lq_anf$##7205759403792804951 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
215:19-215:21::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
216:16-216:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
216:21-216:28::lq_anf$##7205759403792804954 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t\n                                                                      && fst v == t}"
216:22-216:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
216:25-216:27::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
218:10-218:16::lq_anf$##7205759403792804956 :: "{VV : a | VV == root t}"
218:15-218:16::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
218:19-218:26::lq_anf$##7205759403792804957 :: "{VV : a | VV == root t'}"
218:24-218:26::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
219:12-219:24::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
219:17-219:24::lq_anf$##7205759403792804962 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ts\n                                                                      && x_Tuple21 v == t\n                                                                      && snd v == ts\n                                                                      && fst v == t}"
219:18-219:19::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
219:21-219:23::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
220:12-220:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
220:17-220:28::lq_anf$##7205759403792804961 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t'\n                                                                      && fst v == t'}"
220:18-220:20::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
220:22-220:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
220:24-220:27::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
231:1-231:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
231:31-231:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == sumSizeList x1}"
231:36-231:52::lq_anf$##7205759403792804933 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
231:44-231:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
231:48-231:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
235:1-235:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
235:8-235:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
235:17-235:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
236:17-236:20::ds_d2U6 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
238:5-238:12::lq_anf$##7205759403792804917 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
238:10-238:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
238:15-238:22::lq_anf$##7205759403792804918 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
238:20-238:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
238:25-238:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
238:30-238:45::lq_anf$##7205759403792804928 :: "[(Data.Heap.Binominal.Tree a)]"
238:37-238:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
238:42-238:45::ds_d2U6 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
239:5-239:12::lq_anf$##7205759403792804921 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
239:10-239:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
239:15-239:22::lq_anf$##7205759403792804922 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
239:20-239:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
239:25-239:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
239:30-239:45::lq_anf$##7205759403792804927 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
239:37-239:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
239:41-239:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
240:25-240:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
240:33-240:45::lq_anf$##7205759403792804925 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
240:39-240:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
240:42-240:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
240:46-240:64::lq_anf$##7205759403792804926 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
240:54-240:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
240:59-240:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"