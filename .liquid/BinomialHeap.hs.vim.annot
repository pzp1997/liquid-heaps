1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
42:1-42:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
42:18-42:19::lq_anf$##7205759403792804827 :: "{v : GHC.Prim.Int# | v == 0}"
43:22-43:28::lq_anf$##7205759403792804828 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
43:27-43:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
43:31-43:45::lq_anf$##7205759403792804829 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0}"
43:43-43:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
48:1-48:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}"
48:10-48:11::h :: "(Data.Heap.Binominal.Heap a)"
49:8-49:9::_ :: "{v : (Data.Heap.Binominal.Heap a) | v == h}"
50:16-50:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
50:28-50:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
79:1-79:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
80:3-80:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
80:14-80:15::ds_d2SD :: "{v : GHC.Types.Int | v >= 0}"
80:22-80:23::ds_d2SE :: "a"
80:34-80:36::ds_d2SF :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
80:43-80:45::ds_d2SG :: "{v : GHC.Types.Int | 1 <= v}"
85:1-85:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
85:30-85:31::x :: "a"
85:32-85:33::y :: "{VV : a | x <= VV}"
85:34-85:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
94:1-94:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
94:10-94:11::x :: "a"
99:1-99:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
99:6-99:8::t1 :: "(Data.Heap.Binominal.Tree a)"
99:59-99:61::t2 :: "(Data.Heap.Binominal.Tree a)"
100:5-100:7::ds_d2T4 :: "a"
100:11-100:13::ds_d2T8 :: "a"
101:9-101:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
101:25-101:55::_ :: "(Data.Heap.Binominal.Tree a)"
101:53-101:55::lq_anf$##7205759403792804836 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
102:9-102:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
102:25-102:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
102:54-102:56::ds_d2T4 :: "a"
102:57-102:59::ds_d2T8 :: "a"
102:60-102:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
103:10-103:16::lq_anf$##7205759403792804846 :: "GHC.Types.Int"
103:11-103:13::ds_d2T3 :: "{v : GHC.Types.Int | v >= 0}"
103:14-103:15::lq_anf$##7205759403792804845 :: "GHC.Types.Int"
103:17-103:19::ds_d2T4 :: "a"
103:20-103:39::lq_anf$##7205759403792804847 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
103:21-103:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
103:35-103:38::ds_d2T5 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
103:40-103:51::lq_anf$##7205759403792804848 :: "GHC.Types.Int"
103:41-103:44::ds_d2T6 :: "{v : GHC.Types.Int | 1 <= v}"
103:47-103:50::ds_d2Ta :: "{v : GHC.Types.Int | 1 <= v}"
105:9-105:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
105:25-105:55::_ :: "(Data.Heap.Binominal.Tree a)"
105:53-105:55::lq_anf$##7205759403792804835 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
106:9-106:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
106:25-106:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
106:54-106:56::ds_d2T8 :: "a"
106:57-106:59::ds_d2T4 :: "a"
106:60-106:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
107:10-107:16::lq_anf$##7205759403792804841 :: "GHC.Types.Int"
107:11-107:13::ds_d2T7 :: "{v : GHC.Types.Int | v >= 0}"
107:14-107:15::lq_anf$##7205759403792804840 :: "GHC.Types.Int"
107:17-107:19::ds_d2T8 :: "a"
107:20-107:39::lq_anf$##7205759403792804842 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
107:21-107:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
107:35-107:38::ds_d2T9 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
107:40-107:51::lq_anf$##7205759403792804843 :: "GHC.Types.Int"
107:41-107:44::ds_d2T6 :: "{v : GHC.Types.Int | 1 <= v}"
107:47-107:50::ds_d2Ta :: "{v : GHC.Types.Int | 1 <= v}"
111:1-111:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
111:14-111:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
116:1-116:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
116:6-116:7::h :: "(Data.Heap.Binominal.Heap a)"
116:10-116:20::lq_anf$##7205759403792804831 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}"
116:19-116:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
116:24-116:25::lq_anf$##7205759403792804833 :: "GHC.Types.Int"
120:1-120:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
120:11-120:12::x :: "a"
120:20-120:35::lq_anf$##7205759403792804895 :: "[(Data.Heap.Binominal.Tree a)]"
120:21-120:34::lq_anf$##7205759403792804893 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
120:26-120:27::lq_anf$##7205759403792804889 :: "GHC.Types.Int"
120:28-120:29::x :: "{VV : a | VV == x}"
120:30-120:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
120:33-120:34::lq_anf$##7205759403792804892 :: "GHC.Types.Int"
132:1-132:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
132:8-132:9::x :: "a"
132:22-132:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
132:27-132:55::lq_anf$##7205759403792804863 :: "[(Data.Heap.Binominal.Tree a)]"
132:36-132:51::lq_anf$##7205759403792804862 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
132:42-132:43::lq_anf$##7205759403792804858 :: "GHC.Types.Int"
132:44-132:45::x :: "{VV : a | VV == x}"
132:46-132:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
132:49-132:50::lq_anf$##7205759403792804861 :: "GHC.Types.Int"
132:52-132:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
136:1-136:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
136:9-136:10::t :: "(Data.Heap.Binominal.Tree a)"
136:16-136:19::lq_anf$##7205759403792804850 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
136:17-136:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
138:5-138:11::lq_anf$##7205759403792804851 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
138:10-138:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
138:14-138:21::lq_anf$##7205759403792804852 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
138:19-138:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
138:24-138:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
138:28-138:30::ds_d2Td :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
139:24-139:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
139:32-139:43::lq_anf$##7205759403792804855 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
139:38-139:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
139:40-139:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
139:44-139:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
144:1-144:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
144:10-144:11::lq_anf$##7205759403792804897 :: "{v : GHC.Prim.Int# | v == 0}"
145:14-145:15::lq_anf$##7205759403792804899 :: "GHC.Types.Int"
145:18-145:24::lq_anf$##7205759403792804900 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
145:22-145:24::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
149:1-149:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
149:15-149:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
150:19-150:41::$dOrd_a2Lm :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2Lm}"
150:26-150:27::x :: "{VV : a | VV == x}"
150:28-150:41::lq_anf$##7205759403792804887 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
150:38-150:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
190:1-190:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> a"
190:11-190:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
190:18-190:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
190:24-190:34::lq_anf$##7205759403792804920 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
190:37-190:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                && sumSizeList v == heapSize x1}"
204:1-204:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
204:17-204:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
204:41-204:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
204:44-204:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
208:1-208:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
208:23-208:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
208:29-208:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
209:33-209:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
209:52-209:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
209:55-209:62::lq_anf$##7205759403792804902 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
209:56-209:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
209:58-209:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
213:1-213:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                  && sumSizeList v == heapSize x1}"
213:34-213:36::lq_anf$##7205759403792804905 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
217:1-217:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
217:11-217:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
218:31-218:60::lq_anf$##7205759403792804925 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)])"
218:42-218:60::lq_anf$##7205759403792804924 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
218:58-218:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
219:8-219:42::lq_anf$##7205759403792804929 :: "[(Data.Heap.Binominal.Tree a)]"
219:16-219:37::lq_anf$##7205759403792804928 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
219:33-219:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
219:38-219:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
223:1-223:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (a, (Data.Heap.Binominal.Heap a)) | 1 + heapSize (snd v) == heapSize x2}"
223:12-223:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
223:25-223:34::lq_anf$##7205759403792804930 :: "a"
223:33-223:34::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
223:36-223:47::lq_anf$##7205759403792804931 :: "{v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize h}"
223:46-223:47::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
227:1-227:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
227:18-227:25::lq_anf$##7205759403792804915 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
227:19-227:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
227:22-227:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
229:8-229:10::t' :: "(Data.Heap.Binominal.Tree a)"
229:12-229:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree a)] | len VV >= 0}"
229:19-229:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
229:30-229:32::ds_d2RP :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
230:6-230:12::lq_anf$##7205759403792804910 :: "{VV : a | VV == root t}"
230:11-230:12::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
230:15-230:22::lq_anf$##7205759403792804911 :: "{VV : a | VV == root t'}"
230:20-230:22::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
231:8-231:15::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
231:9-231:10::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
231:12-231:14::ds_d2RP :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
232:8-232:19::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
232:9-232:11::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
232:13-232:14::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
232:15-232:18::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
243:1-243:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
243:31-243:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
243:36-243:52::lq_anf$##7205759403792804884 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
243:44-243:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
243:48-243:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
247:1-247:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
247:8-247:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
247:17-247:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
248:17-248:20::ds_d2Tz :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
250:5-250:12::lq_anf$##7205759403792804868 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
250:10-250:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
250:15-250:22::lq_anf$##7205759403792804869 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
250:20-250:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
250:25-250:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
250:30-250:45::lq_anf$##7205759403792804879 :: "[(Data.Heap.Binominal.Tree a)]"
250:37-250:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
250:42-250:45::ds_d2Tz :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
251:5-251:12::lq_anf$##7205759403792804872 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
251:10-251:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
251:15-251:22::lq_anf$##7205759403792804873 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
251:20-251:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
251:25-251:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
251:30-251:45::lq_anf$##7205759403792804878 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
251:37-251:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
251:41-251:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
252:25-252:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
252:33-252:45::lq_anf$##7205759403792804876 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
252:39-252:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
252:42-252:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
252:46-252:64::lq_anf$##7205759403792804877 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
252:54-252:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
252:59-252:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"