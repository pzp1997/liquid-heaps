1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
43:1-43:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
43:18-43:19::lq_anf$##7205759403792806047 :: "{v : GHC.Prim.Int# | v == 0}"
44:22-44:28::lq_anf$##7205759403792806048 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
44:27-44:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
44:31-44:45::lq_anf$##7205759403792806049 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0\n                     && len xs <= v}"
44:43-44:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
55:1-55:12::Data.Heap.Binominal.maxRankList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == maxRankList x1\n                                                           && VV >= 0}"
55:18-55:19::lq_anf$##7205759403792806055 :: "{v : GHC.Prim.Int# | v == 0}"
57:7-57:8::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x}"
57:11-57:17::_ :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x}"
57:16-57:17::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
58:7-58:9::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0}"
58:12-58:26::Data.Heap.Binominal.maxRankList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == maxRankList x1\n                                                           && VV >= 0}"
58:24-58:26::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
59:6-59:7::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x\n                     && v == r}"
59:10-59:12::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0\n                     && v == r'}"
59:18-59:20::r' :: "{v : GHC.Types.Int | v == maxRankList xs\n                     && v >= 0\n                     && v == r'}"
59:26-59:27::r :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees x)\n                     && v == rank x\n                     && v == r}"
69:1-69:8::Data.Heap.Binominal.lubRank :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == lubRank x1\n                                                           && VV >= 0}"
69:14-69:15::lq_anf$##7205759403792806062 :: "{v : GHC.Prim.Int# | v == 0}"
70:14-70:15::lq_anf$##7205759403792806060 :: "GHC.Types.Int"
70:18-70:32::lq_anf$##7205759403792806061 :: "{v : GHC.Types.Int | v >= 0}"
70:30-70:32::ds_d3dp :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
75:1-75:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0\n                                                         && len (unheap x1) <= VV}"
75:22-75:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
75:34-75:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
80:1-80:5::Data.Heap.Binominal.pow2 :: "{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 1}"
80:6-80:7::n :: "{VV : GHC.Types.Int | VV >= 0}"
80:13-80:14::n :: "{v : GHC.Types.Int | v >= 0\n                     && v == n}"
80:18-80:19::lq_anf$##7205759403792806066 :: "GHC.Types.Int"
80:25-80:26::lq_anf$##7205759403792806075 :: "{v : GHC.Prim.Int# | v == 1}"
80:32-80:33::lq_anf$##7205759403792806070 :: "GHC.Types.Int"
80:36-80:48::lq_anf$##7205759403792806074 :: "{VV : GHC.Types.Int | VV >= 1}"
80:41-80:48::lq_anf$##7205759403792806073 :: "GHC.Types.Int"
80:42-80:43::n :: "{v : GHC.Types.Int | v >= 0\n                     && v == n}"
80:46-80:47::lq_anf$##7205759403792806072 :: "GHC.Types.Int"
112:1-112:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
113:3-113:46::Data.Heap.Binominal.Node :: "forall a .\nx1:a -> x2:[(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> x3:{v : GHC.Types.Int | v >= 0\n                                                                                       && v == len x2} -> x4:{v : GHC.Types.Int | v >= 1\n                                                                                                                                  && v == 1 + sumSizeList x2} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                                     && rank v == x3\n                                                                                                                                                                                                     && subtrees v == x2\n                                                                                                                                                                                                     && root v == x1}"
113:14-113:15::ds_d3a6 :: "{v : GHC.Types.Int | v >= 0}"
113:22-113:23::ds_d3a4 :: "a"
113:34-113:36::ds_d3a5 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
113:43-113:45::ds_d3a7 :: "{v : GHC.Types.Int | v >= 1}"
118:1-118:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
118:30-118:31::x :: "a"
118:32-118:33::y :: "{VV : a | x <= VV}"
118:34-118:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
122:1-122:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
122:34-122:35::x :: "a"
122:36-122:37::y :: "{VV : a | x <= VV}"
122:38-122:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
126:1-126:17::Data.Heap.Binominal.sublistSizeLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> x2:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV >= 0\n                                                                                              && VV == size x1 + sumSizeList x2\n                                                                                              && sumSizeList x2 < VV}"
126:18-126:19::x :: "(Data.Heap.Binominal.Tree a)"
126:20-126:22::xs :: "[(Data.Heap.Binominal.Tree a)]"
127:3-127:22::lq_anf$##7205759403792806154 :: "GHC.Types.Int -> GHC.Types.Int"
127:10-127:22::lq_anf$##7205759403792806153 :: "GHC.Types.Bool"
127:11-127:12::lq_anf$##7205759403792806151 :: "GHC.Types.Int"
127:15-127:21::lq_anf$##7205759403792806152 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
127:20-127:21::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
128:3-128:23::lq_anf$##7205759403792806156 :: "{v : GHC.Types.Int | v >= 0}"
128:15-128:23::lq_anf$##7205759403792806155 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == xs\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts xs)\n                                      && len v == 1 + len xs\n                                      && lubRank v == 1 + maxRankList (: x xs)\n                                      && sumSizeList v == size x + sumSizeList xs\n                                      && maxRankList v == (if rank x < maxRankList xs then maxRankList xs else rank x)}"
128:16-128:17::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
128:20-128:22::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
135:1-135:23::Data.Heap.Binominal.subtreeTransitiveLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                     && x1 <= VV} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x3}]"
135:26-135:28::ts :: "[(Data.Heap.Binominal.Tree a)]"
139:1-139:14::Data.Heap.Binominal.consTreeLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : (Data.Heap.Binominal.Tree a) | size VV <= x1} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}]"
139:17-139:18::t :: "(Data.Heap.Binominal.Tree a)"
139:19-139:21::ts :: "[(Data.Heap.Binominal.Tree a)]"
139:24-139:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
139:28-139:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
143:1-143:10::Data.Heap.Binominal.testTrick :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [{t : (Data.Heap.Binominal.Tree a) | size t < x1}] | VV /= []} -> {t : (Data.Heap.Binominal.Tree a) | size t < x1}"
143:22-143:23::h :: "{v : (Data.Heap.Binominal.Tree a) | v == h}"
147:1-147:24::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
147:30-147:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
149:7-149:9::ih :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
149:12-149:38::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
149:36-149:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
150:7-150:14::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
150:17-150:38::_ :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
150:34-150:35::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
150:36-150:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
151:7-151:13::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
151:16-151:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
151:28-151:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
152:7-152:22::refinedSubtrees :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
152:25-152:65::_ :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
152:48-152:54::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v\n                     && v == sizets}"
152:55-152:57::ih :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | lubRank v >= 0\n                                                                       && sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && maxRankList v >= 0\n                                                                       && v == ih}"
152:58-152:65::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
153:17-153:24::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
153:25-153:26::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
153:27-153:42::refinedSubtrees :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}] | lubRank v >= 0\n                                                                && sumSizeList v >= 0\n                                                                && len v >= 0\n                                                                && maxRankList v >= 0\n                                                                && v == refinedSubtrees}"
170:1-170:10::Data.Heap.Binominal.eltsTree' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Set.Internal.Set a)"
170:29-170:42::Data.Set.Internal.singleton :: "forall a .\nx1:a -> {v : (Data.Set.Internal.Set a) | v == Set_sng x1}"
170:41-170:42::x :: "{VV : a | VV == x}"
172:7-172:16::remainder :: "{v : (Data.Heap.Binominal.Tree a) | subtrees v == ts\n                                    && root v == x}"
172:19-172:50::_ :: "{v : (Data.Heap.Binominal.Tree a) | subtrees v == ts\n                                    && root v == x}"
172:24-172:25::x :: "{VV : a | VV == x}"
172:26-172:28::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
172:29-172:36::lq_anf$##7205759403792806143 :: "GHC.Types.Int"
172:30-172:31::ds_d39t :: "{v : GHC.Types.Int | v >= 0}"
172:34-172:35::lq_anf$##7205759403792806142 :: "GHC.Types.Int"
172:37-172:50::lq_anf$##7205759403792806145 :: "GHC.Types.Int"
172:38-172:40::ds_d39u :: "{v : GHC.Types.Int | v >= 1}"
172:43-172:49::lq_anf$##7205759403792806144 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList (subtrees t)\n                     && v == size t}"
172:48-172:49::t :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | v == t}"
173:11-173:50::lq_anf$##7205759403792806148 :: "(Data.Set.Internal.Set a)"
173:20-173:35::lq_anf$##7205759403792806146 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng x}"
173:33-173:34::x :: "{VV : a | VV == x}"
173:36-173:49::lq_anf$##7205759403792806147 :: "(Data.Set.Internal.Set a)"
173:47-173:48::t :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | v == t}"
173:51-173:72::lq_anf$##7205759403792806149 :: "(Data.Set.Internal.Set a)"
173:62-173:71::remainder :: "{v : (Data.Heap.Binominal.Tree a) | subtrees v == ts\n                                    && root v == x\n                                    && v == remainder}"
180:1-180:33::Data.Heap.Binominal.strictTransitivitySizeBoundLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                       && x1 < VV} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV < x3}]"
180:36-180:38::ts :: "[(Data.Heap.Binominal.Tree a)]"
185:1-185:9::Data.Heap.Binominal.eltsTree :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Set.Internal.Set a)"
185:10-185:11::t :: "(Data.Heap.Binominal.Tree a)"
186:7-186:25::boundBySumSizeList :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
186:28-186:56::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
186:53-186:55::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
187:7-187:25::boundByOverallSize :: "[(Data.Heap.Binominal.Tree a)]"
187:28-187:105::_ :: "[(Data.Heap.Binominal.Tree a)]"
187:61-187:77::lq_anf$##7205759403792806159 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
187:74-187:76::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
187:78-187:96::boundBySumSizeList :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | lubRank v >= 0\n                                                                       && sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && maxRankList v >= 0\n                                                                       && v == boundBySumSizeList}"
187:97-187:105::lq_anf$##7205759403792806160 :: "{v : GHC.Types.Int | v >= 1}"
187:103-187:104::lq_anf$##7205759403792806158 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && rank v == r\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && v == Node x ts r sz}"
188:3-188:35::lq_anf$##7205759403792806164 :: "(Data.Set.Internal.Set a) -> (Data.Set.Internal.Set a)"
188:10-188:35::lq_anf$##7205759403792806163 :: "GHC.Types.Bool"
188:11-188:25::lq_anf$##7205759403792806161 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
188:23-188:25::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == ts}"
188:28-188:34::lq_anf$##7205759403792806162 :: "{v : GHC.Types.Int | v >= 1}"
188:33-188:34::lq_anf$##7205759403792806158 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && rank v == r\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && v == Node x ts r sz}"
189:3-189:57::lq_anf$##7205759403792806167 :: "(Data.Set.Internal.Set a)"
189:11-189:26::lq_anf$##7205759403792806165 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng x}"
189:24-189:25::x :: "{VV : a | VV == x}"
189:27-189:57::lq_anf$##7205759403792806166 :: "(Data.Set.Internal.Set a)"
189:38-189:56::boundByOverallSize :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == boundByOverallSize}"
194:1-194:10::Data.Heap.Binominal.eltsTrees :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> (Data.Set.Internal.Set a)"
194:16-194:23::_ :: "forall a . {v : (Data.Set.Internal.Set a) | Set_emp v}"
195:20-195:55::$dOrd_a30n :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a30n}"
195:28-195:40::lq_anf$##7205759403792806169 :: "(Data.Set.Internal.Set a)"
195:38-195:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
195:41-195:55::lq_anf$##7205759403792806170 :: "(Data.Set.Internal.Set a)"
195:52-195:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
200:1-200:12::Data.Heap.Binominal.mapEltsTree :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> [(Data.Set.Internal.Set a)]"
200:18-200:20::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
201:22-201:32::lq_anf$##7205759403792806172 :: "(Data.Set.Internal.Set a)"
201:31-201:32::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
201:35-201:49::lq_anf$##7205759403792806173 :: "[(Data.Set.Internal.Set a)]"
201:47-201:49::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
210:1-210:7::Data.Heap.Binominal.assert :: "forall a . {VV : GHC.Types.Bool | VV} -> a -> a"
210:10-210:11::x :: "a"
214:1-214:13::Data.Heap.Binominal.assertLBTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
214:18-214:19::x :: "a"
218:1-218:17::Data.Heap.Binominal.assertLBTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
218:22-218:23::x :: "a"
222:1-222:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
222:6-222:8::t1 :: "(Data.Heap.Binominal.Tree a)"
222:30-222:32::t2 :: "(Data.Heap.Binominal.Tree a)"
223:5-223:7::x1 :: "{VV : a | VV == x1}"
223:11-223:13::x2 :: "{VV : a | VV == x2}"
224:9-224:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
224:25-224:55::_ :: "(Data.Heap.Binominal.Tree a)"
224:53-224:55::lq_anf$##7205759403792806078 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2\n                                    && size v == sz2\n                                    && rank v == r2\n                                    && subtrees v == ts2\n                                    && root v == v\n                                    && v == Node v ts2 r2 sz2}"
225:9-225:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2}"
225:25-225:73::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2}"
225:54-225:56::x1 :: "{VV : a | VV == x1}"
225:57-225:59::x2 :: "{VV : a | VV == x2}"
225:60-225:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
226:10-226:12::x1 :: "{VV : a | VV == x1}"
226:13-226:32::lq_anf$##7205759403792806086 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == ts1\n                                      && head v == t2BoundedByX1\n                                      && listElts v == Set_cup (Set_sng t2BoundedByX1) (listElts ts1)\n                                      && len v == 1 + len ts1\n                                      && lubRank v == 1 + maxRankList (: t2BoundedByX1 ts1)\n                                      && sumSizeList v == size t2BoundedByX1 + sumSizeList ts1\n                                      && maxRankList v == (if rank t2BoundedByX1 < maxRankList ts1 then maxRankList ts1 else rank t2BoundedByX1)}"
226:14-226:27::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size v == size t2BoundedByX2\n                                                      && v == t2BoundedByX1}"
226:28-226:31::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | lubRank v >= 0\n                                                        && sumSizeList v >= 0\n                                                        && len v >= 0\n                                                        && maxRankList v >= 0\n                                                        && v == ts1}"
226:33-226:41::lq_anf$##7205759403792806089 :: "GHC.Types.Int"
226:34-226:35::lq_anf$##7205759403792806088 :: "GHC.Types.Int"
226:38-226:40::r1 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len ts1\n                     && v == r1}"
226:42-226:53::lq_anf$##7205759403792806090 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
226:43-226:46::sz1 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList ts1\n                     && v == sz1}"
226:49-226:52::sz2 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList ts2\n                     && v == sz2}"
228:9-228:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
228:25-228:55::_ :: "(Data.Heap.Binominal.Tree a)"
228:53-228:55::lq_anf$##7205759403792806077 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1\n                                    && size v == sz1\n                                    && rank v == r1\n                                    && subtrees v == ts1\n                                    && root v == x1\n                                    && v == Node x1 ts1 r1 sz1}"
229:9-229:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1}"
229:25-229:73::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1}"
229:54-229:56::x2 :: "{VV : a | VV == x2}"
229:57-229:59::x1 :: "{VV : a | VV == x1}"
229:60-229:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
230:10-230:12::x2 :: "{VV : a | VV == x2}"
230:13-230:32::lq_anf$##7205759403792806081 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == ts2\n                                      && head v == t1BoundedByX2\n                                      && listElts v == Set_cup (Set_sng t1BoundedByX2) (listElts ts2)\n                                      && len v == 1 + len ts2\n                                      && lubRank v == 1 + maxRankList (: t1BoundedByX2 ts2)\n                                      && sumSizeList v == size t1BoundedByX2 + sumSizeList ts2\n                                      && maxRankList v == (if rank t1BoundedByX2 < maxRankList ts2 then maxRankList ts2 else rank t1BoundedByX2)}"
230:14-230:27::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) | size v == size t1BoundedByX1\n                                                      && v == t1BoundedByX2}"
230:28-230:31::ts2 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] | lubRank v >= 0\n                                                        && sumSizeList v >= 0\n                                                        && len v >= 0\n                                                        && maxRankList v >= 0\n                                                        && v == ts2}"
230:33-230:41::lq_anf$##7205759403792806084 :: "GHC.Types.Int"
230:34-230:35::lq_anf$##7205759403792806083 :: "GHC.Types.Int"
230:38-230:40::r2 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len ts2\n                     && v == r2}"
230:42-230:53::lq_anf$##7205759403792806085 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
230:43-230:46::sz1 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList ts1\n                     && v == sz1}"
230:49-230:52::sz2 :: "{v : GHC.Types.Int | v >= 1\n                     && v == 1 + sumSizeList ts2\n                     && v == sz2}"
234:1-234:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
234:14-234:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
238:1-238:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
238:6-238:7::h :: "(Data.Heap.Binominal.Heap a)"
238:10-238:20::lq_anf$##7205759403792806051 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0\n                     && len (unheap h) <= v}"
238:19-238:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
238:24-238:25::lq_anf$##7205759403792806053 :: "GHC.Types.Int"
242:1-242:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
242:11-242:12::x :: "a"
242:20-242:35::lq_anf$##7205759403792806184 :: "[(Data.Heap.Binominal.Tree a)]"
242:21-242:34::lq_anf$##7205759403792806182 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
242:26-242:27::x :: "{VV : a | VV == x}"
242:28-242:30::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
242:31-242:32::lq_anf$##7205759403792806179 :: "GHC.Types.Int"
242:33-242:34::lq_anf$##7205759403792806181 :: "GHC.Types.Int"
254:1-254:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
254:8-254:9::x :: "a"
254:22-254:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
254:27-254:55::lq_anf$##7205759403792806105 :: "[(Data.Heap.Binominal.Tree a)]"
254:36-254:51::lq_anf$##7205759403792806104 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
254:42-254:43::x :: "{VV : a | VV == x}"
254:44-254:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
254:47-254:48::lq_anf$##7205759403792806101 :: "GHC.Types.Int"
254:49-254:50::lq_anf$##7205759403792806103 :: "GHC.Types.Int"
254:52-254:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
258:1-258:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
258:9-258:10::t :: "(Data.Heap.Binominal.Tree a)"
258:16-258:19::lq_anf$##7205759403792806092 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && lubRank v == 0\n                                      && sumSizeList v == 0\n                                      && maxRankList v == 0}"
258:17-258:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
260:5-260:11::lq_anf$##7205759403792806093 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t)\n                     && v == rank t}"
260:10-260:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
260:14-260:21::lq_anf$##7205759403792806094 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t')\n                     && v == rank t'}"
260:19-260:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
260:24-260:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
260:28-260:30::ds_d3aw :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
261:24-261:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
261:32-261:43::lq_anf$##7205759403792806097 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
261:38-261:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
261:40-261:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
261:44-261:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts'}"
265:1-265:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
265:15-265:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
266:19-266:41::$dOrd_a2SG :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2SG}"
266:26-266:27::x :: "{VV : a | VV == x}"
266:28-266:41::lq_anf$##7205759403792806176 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
266:38-266:40::xs :: "{v : [a] | lubRank v >= 0\n           && sumSizeList v >= 0\n           && len v >= 0\n           && maxRankList v >= 0\n           && v == xs}"
308:1-308:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
308:11-308:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
308:18-308:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
308:24-308:34::lq_anf$##7205759403792806193 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
308:37-308:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
314:1-314:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
314:17-314:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
314:41-314:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
314:44-314:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
318:1-318:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
318:23-318:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
318:29-318:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == acc}"
319:33-319:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
319:52-319:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == xs}"
319:55-319:62::lq_anf$##7205759403792806186 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && lubRank v == 1 + maxRankList (: x acc)\n                                      && sumSizeList v == size x + sumSizeList acc\n                                      && maxRankList v == (if rank x < maxRankList acc then maxRankList acc else rank x)}"
319:56-319:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
319:58-319:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == acc}"
323:1-323:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV\n                                                                                                       && sumSizeList VV == heapSize x1}"
323:34-323:36::lq_anf$##7205759403792806189 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts}"
327:1-327:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
327:11-327:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
328:31-328:60::lq_anf$##7205759403792806198 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
328:42-328:60::lq_anf$##7205759403792806197 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
328:58-328:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
329:8-329:42::lq_anf$##7205759403792806202 :: "[(Data.Heap.Binominal.Tree a)]"
329:16-329:37::lq_anf$##7205759403792806201 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
329:33-329:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
329:38-329:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
333:1-333:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> (a, (Data.Heap.Binominal.Heap a))<\\x1 VV -> {v : (Data.Heap.Binominal.Heap {VV : a | x1 <= VV}) | 1 + heapSize v == heapSize x2}>"
333:12-333:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
334:36-334:65::lq_anf$##7205759403792806204 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
334:47-334:65::lq_anf$##7205759403792806203 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
334:63-334:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
335:4-335:10::minElt :: "{VV : a | VV == minElt}"
335:12-335:51::lq_anf$##7205759403792806209 :: "(Data.Heap.Binominal.Heap a)"
335:17-335:51::lq_anf$##7205759403792806208 :: "[(Data.Heap.Binominal.Tree a)]"
335:25-335:46::lq_anf$##7205759403792806207 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
335:42-335:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | lubRank v >= 0\n                                                            && sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && maxRankList v >= 0\n                                                            && v == ts1}"
335:47-335:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
339:1-339:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
339:18-339:25::lq_anf$##7205759403792806134 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && lubRank v == 0\n                                      && sumSizeList v == 0\n                                      && maxRankList v == 0}"
339:19-339:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
339:22-339:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
341:8-341:10::t' :: "(Data.Heap.Binominal.Tree a)"
341:12-341:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
341:19-341:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Data.Heap.Binominal.Tree a)] | 0 < len VV} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
341:30-341:32::ds_d3bX :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
342:7-342:8::x :: "{VV : a | VV == root t}"
342:11-342:17::_ :: "{VV : a | VV == root t}"
342:16-342:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
343:7-343:9::x' :: "{VV : a | VV == root t'}"
343:12-343:19::_ :: "{VV : a | VV == root t'}"
343:17-343:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
344:7-344:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
344:18-344:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
344:46-344:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
345:7-345:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
345:19-345:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
345:47-345:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
346:6-346:7::x :: "{VV : a | VV == root t\n          && VV == x}"
346:10-346:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
348:9-348:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
348:14-348:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
348:43-348:44::x :: "{VV : a | VV == root t\n          && VV == x}"
348:45-348:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
348:48-348:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
349:9-349:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
349:14-349:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
349:47-349:48::x :: "{VV : a | VV == root t\n          && VV == x}"
349:49-349:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
349:52-349:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && lubRank v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && maxRankList v >= 0\n                                                             && v == ts'}"
350:6-350:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
350:9-350:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
350:12-350:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && lubRank v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && maxRankList v >= 0\n                                                       && v == tl}"
352:9-352:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
352:14-352:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
352:43-352:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
352:46-352:47::x :: "{VV : a | VV == root t\n          && VV == x}"
352:48-352:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
353:6-353:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
353:10-353:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
353:13-353:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && lubRank v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && maxRankList v >= 0\n                                                             && v == ts'}"
366:1-366:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
366:31-366:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
366:36-366:52::lq_anf$##7205759403792806126 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
366:44-366:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
366:48-366:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2}"
370:1-370:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
370:8-370:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
370:17-370:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
371:17-371:20::ds_d3aS :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
373:5-373:12::lq_anf$##7205759403792806110 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t1)\n                     && v == rank t1}"
373:10-373:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
373:15-373:22::lq_anf$##7205759403792806111 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t2)\n                     && v == rank t2}"
373:20-373:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
373:25-373:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
373:30-373:45::lq_anf$##7205759403792806121 :: "[(Data.Heap.Binominal.Tree a)]"
373:37-373:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1'}"
373:42-373:45::ds_d3aS :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0}"
374:5-374:12::lq_anf$##7205759403792806114 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t2)\n                     && v == rank t2}"
374:10-374:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
374:15-374:22::lq_anf$##7205759403792806115 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len (subtrees t1)\n                     && v == rank t1}"
374:20-374:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
374:25-374:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
374:30-374:45::lq_anf$##7205759403792806120 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
374:37-374:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1}"
374:41-374:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2'}"
375:25-375:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
375:33-375:45::lq_anf$##7205759403792806118 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
375:39-375:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
375:42-375:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
375:46-375:64::lq_anf$##7205759403792806119 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
375:54-375:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts1'}"
375:59-375:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | lubRank v >= 0\n                                      && sumSizeList v >= 0\n                                      && len v >= 0\n                                      && maxRankList v >= 0\n                                      && v == ts2'}"
391:1-391:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}"
391:22-391:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && lubRank v == 0\n                                            && sumSizeList v == 0\n                                            && maxRankList v == 0}"
393:8-393:14::minElt :: "a"
393:16-393:18::h' :: "(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})"
393:22-393:34::_ :: "(a, (Data.Heap.Binominal.Heap a))<\\x4 VV -> (Data.Heap.Binominal.Heap {VV : a | x4 <= VV})>"
393:33-393:34::ds_d3cM :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
394:3-394:9::minElt :: "{VV : a | VV == minElt}"
394:12-394:23::lq_anf$##7205759403792806212 :: "{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}"
394:21-394:23::h' :: "{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}"
398:1-398:14::Data.Heap.Binominal.sortUsingHeap :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}"
398:17-398:25::lq_anf$##7205759403792806213 :: "x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}"
398:28-398:36::lq_anf$##7205759403792806214 :: "x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}"