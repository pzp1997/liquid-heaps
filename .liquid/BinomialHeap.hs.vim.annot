1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
47:1-47:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
47:18-47:19::lq_anf$##7205759403792806096 :: "{v : GHC.Prim.Int# | v == 0}"
48:22-48:28::lq_anf$##7205759403792806097 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
48:27-48:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
48:31-48:45::lq_anf$##7205759403792806098 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0}"
48:43-48:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
75:1-75:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV})"
76:3-76:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
76:14-76:15::ds_d3d1 :: "{v : GHC.Types.Int | v >= 0}"
76:22-76:23::ds_d3d2 :: "a"
76:34-76:36::ds_d3d3 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
76:43-76:45::ds_d3d4 :: "{v : GHC.Types.Int | 1 <= v}"
80:1-80:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV})"
80:30-80:31::x :: "a"
80:32-80:33::y :: "{VV : a | x <= VV}"
80:34-80:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
90:1-90:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
90:10-90:11::x :: "a"
95:1-95:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree a)"
95:6-95:8::t1 :: "(Data.Heap.Binominal.Tree a)"
95:59-95:61::t2 :: "(Data.Heap.Binominal.Tree a)"
96:5-96:7::ds_d3ds :: "a"
96:11-96:13::ds_d3dw :: "a"
97:9-97:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
97:25-97:55::_ :: "(Data.Heap.Binominal.Tree a)"
97:53-97:55::lq_anf$##7205759403792806101 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
98:9-98:22::t2BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
98:25-98:73::_ :: "(Data.Heap.Binominal.Tree a)"
98:54-98:56::ds_d3ds :: "a"
98:57-98:59::ds_d3dw :: "a"
98:60-98:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
99:10-99:16::lq_anf$##7205759403792806111 :: "GHC.Types.Int"
99:11-99:13::ds_d3dr :: "{v : GHC.Types.Int | v >= 0}"
99:14-99:15::lq_anf$##7205759403792806110 :: "GHC.Types.Int"
99:17-99:19::ds_d3ds :: "a"
99:20-99:39::lq_anf$##7205759403792806112 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
99:21-99:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX1}"
99:35-99:38::ds_d3dt :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
99:40-99:51::lq_anf$##7205759403792806113 :: "GHC.Types.Int"
99:41-99:44::ds_d3du :: "{v : GHC.Types.Int | 1 <= v}"
99:47-99:50::ds_d3dy :: "{v : GHC.Types.Int | 1 <= v}"
101:9-101:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
101:25-101:55::_ :: "(Data.Heap.Binominal.Tree a)"
101:53-101:55::lq_anf$##7205759403792806100 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
102:9-102:22::t1BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
102:25-102:73::_ :: "(Data.Heap.Binominal.Tree a)"
102:54-102:56::ds_d3dw :: "a"
102:57-102:59::ds_d3ds :: "a"
102:60-102:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
103:10-103:16::lq_anf$##7205759403792806106 :: "GHC.Types.Int"
103:11-103:13::ds_d3dv :: "{v : GHC.Types.Int | v >= 0}"
103:14-103:15::lq_anf$##7205759403792806105 :: "GHC.Types.Int"
103:17-103:19::ds_d3dw :: "a"
103:20-103:39::lq_anf$##7205759403792806107 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
103:21-103:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX2}"
103:35-103:38::ds_d3dx :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
103:40-103:51::lq_anf$##7205759403792806108 :: "GHC.Types.Int"
103:41-103:44::ds_d3du :: "{v : GHC.Types.Int | 1 <= v}"
103:47-103:50::ds_d3dy :: "{v : GHC.Types.Int | 1 <= v}"
107:1-107:6::Data.Heap.Binominal.empty :: "forall a . (Data.Heap.Binominal.Heap a)"
112:1-112:5::Data.Heap.Binominal.null :: "forall a . (Data.Heap.Binominal.Heap a) -> GHC.Types.Bool"
116:1-116:10::Data.Heap.Binominal.singleton :: "forall a . a -> (Data.Heap.Binominal.Heap a)"
116:11-116:12::x :: "a"
116:21-116:34::lq_anf$##7205759403792806160 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
116:26-116:27::lq_anf$##7205759403792806156 :: "GHC.Types.Int"
116:28-116:29::x :: "{VV : a | VV == x}"
116:30-116:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
116:33-116:34::lq_anf$##7205759403792806159 :: "GHC.Types.Int"
128:1-128:7::Data.Heap.Binominal.sumNat :: "{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 0}"
128:8-128:9::x :: "{VV : GHC.Types.Int | VV >= 0}"
128:10-128:11::y :: "{VV : GHC.Types.Int | VV >= 0}"
128:14-128:15::x :: "{v : GHC.Types.Int | v >= 0\n                     && v == x}"
128:18-128:19::y :: "{v : GHC.Types.Int | v >= 0\n                     && v == y}"
132:1-132:11::Data.Heap.Binominal.sumNatList :: "[{VV : GHC.Types.Int | VV >= 0}] -> {VV : GHC.Types.Int | VV >= 0}"
132:17-132:18::lq_anf$##7205759403792806164 :: "{v : GHC.Prim.Int# | v == 0}"
133:21-133:45::Data.Heap.Binominal.sumNat :: "{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v >= 0}"
133:28-133:29::x :: "{v : GHC.Types.Int | v >= 0\n                     && v == x}"
133:30-133:45::lq_anf$##7205759403792806165 :: "{v : GHC.Types.Int | v >= 0}"
133:42-133:44::xs :: "{v : [{v : GHC.Types.Int | v >= 0}] | len v >= 0\n                                      && v == xs}"
150:1-150:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
150:8-150:9::x :: "a"
150:36-150:51::lq_anf$##7205759403792806126 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
150:42-150:43::lq_anf$##7205759403792806122 :: "GHC.Types.Int"
150:44-150:45::x :: "{VV : a | VV == x}"
150:46-150:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
150:49-150:50::lq_anf$##7205759403792806125 :: "GHC.Types.Int"
154:1-154:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
154:9-154:10::t :: "(Data.Heap.Binominal.Tree a)"
154:16-154:19::lq_anf$##7205759403792806115 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
154:17-154:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
156:5-156:11::lq_anf$##7205759403792806116 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
156:10-156:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
156:14-156:21::lq_anf$##7205759403792806117 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
156:19-156:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
156:24-156:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
156:28-156:30::ds_d3dB :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
157:24-157:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
157:32-157:43::lq_anf$##7205759403792806120 :: "(Data.Heap.Binominal.Tree a)"
157:38-157:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
157:40-157:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
157:44-157:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}"
161:1-161:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[a] -> (Data.Heap.Binominal.Heap a)"
161:19-161:32::lq_anf$##7205759403792806152 :: "(Data.Heap.Binominal.Heap a) -> a -> (Data.Heap.Binominal.Heap a)"
161:25-161:31::lq_anf$##7205759403792806151 :: "a -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
161:33-161:38::_ :: "forall a . (Data.Heap.Binominal.Heap a)"
201:1-201:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe a)"
201:21-201:25::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
201:28-201:31::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
201:36-201:49::lq_anf$##7205759403792806183 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
215:1-215:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
216:8-216:21::lq_anf$##7205759403792806185 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
217:33-217:38::_ :: "forall a . (Data.Heap.Binominal.Heap a)"
218:35-218:66::lq_anf$##7205759403792806190 :: "[(Data.Heap.Binominal.Tree a)]"
218:48-218:61::lq_anf$##7205759403792806189 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == len ts1}"
218:57-218:60::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
218:62-218:65::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
222:1-222:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe (a, (Data.Heap.Binominal.Heap a)))"
222:24-222:31::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
223:24-223:48::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
223:26-223:27::m :: "a"
223:32-223:33::m :: "{VV : a | VV == m}"
223:35-223:46::lq_anf$##7205759403792806193 :: "(Data.Heap.Binominal.Heap a)"
223:45-223:46::ds_d3eH :: "(Data.Heap.Binominal.Heap a)"
223:53-223:62::lq_anf$##7205759403792806195 :: "(GHC.Maybe.Maybe a)"
223:61-223:62::ds_d3eH :: "(Data.Heap.Binominal.Heap a)"
227:1-227:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> (GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
227:17-227:24::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
229:8-229:21::lq_anf$##7205759403792806167 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
229:19-229:21::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
230:16-230:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
230:21-230:28::lq_anf$##7205759403792806170 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t\n                                                                      && fst v == t}"
230:22-230:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
230:25-230:27::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
232:10-232:16::lq_anf$##7205759403792806172 :: "{VV : a | VV == root t}"
232:15-232:16::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
232:19-232:26::lq_anf$##7205759403792806173 :: "{VV : a | VV == root t'}"
232:24-232:26::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
233:12-233:24::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
233:17-233:24::lq_anf$##7205759403792806178 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ts\n                                                                      && x_Tuple21 v == t\n                                                                      && snd v == ts\n                                                                      && fst v == t}"
233:18-233:19::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
233:21-233:23::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
234:12-234:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
234:17-234:28::lq_anf$##7205759403792806177 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t'\n                                                                      && fst v == t'}"
234:18-234:20::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
234:22-234:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
234:24-234:27::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}"
245:1-245:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
249:1-249:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
249:8-249:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
249:17-249:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
250:17-250:20::ds_d3dS :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
252:5-252:12::lq_anf$##7205759403792806133 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
252:10-252:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
252:15-252:22::lq_anf$##7205759403792806134 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
252:20-252:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
252:25-252:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
252:30-252:45::lq_anf$##7205759403792806144 :: "[(Data.Heap.Binominal.Tree a)]"
252:37-252:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
252:42-252:45::ds_d3dS :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
253:5-253:12::lq_anf$##7205759403792806137 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
253:10-253:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
253:15-253:22::lq_anf$##7205759403792806138 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
253:20-253:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
253:25-253:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
253:30-253:45::lq_anf$##7205759403792806143 :: "[(Data.Heap.Binominal.Tree a)]"
253:37-253:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
253:41-253:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"
254:25-254:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
254:33-254:45::lq_anf$##7205759403792806141 :: "(Data.Heap.Binominal.Tree a)"
254:39-254:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
254:42-254:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
254:46-254:64::lq_anf$##7205759403792806142 :: "[(Data.Heap.Binominal.Tree a)]"
254:54-254:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
254:59-254:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"