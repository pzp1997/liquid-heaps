1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
45:1-45:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
45:18-45:19::lq_anf$##7205759403792805226 :: "{v : GHC.Prim.Int# | v == 0}"
46:22-46:28::lq_anf$##7205759403792805227 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
46:27-46:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
46:31-46:45::lq_anf$##7205759403792805228 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0\n                     && len xs <= v}"
46:43-46:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
51:1-51:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0\n                                                         && len (unheap x1) <= VV}"
51:22-51:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
51:34-51:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
80:1-80:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
81:3-81:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
81:14-81:15::ds_d2Xz :: "{v : GHC.Types.Int | v >= 0}"
81:22-81:23::ds_d2XA :: "a"
81:34-81:36::ds_d2XB :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
81:43-81:45::ds_d2XC :: "{v : GHC.Types.Int | 1 <= v}"
86:1-86:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
86:30-86:31::x :: "a"
86:32-86:33::y :: "{VV : a | x <= VV}"
86:34-86:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
90:1-90:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
90:34-90:35::x :: "a"
90:36-90:37::y :: "{VV : a | x <= VV}"
90:38-90:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
99:1-99:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
99:10-99:11::x :: "a"
103:1-103:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
103:23-103:24::x :: "a"
107:1-107:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
107:27-107:28::x :: "a"
111:1-111:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
111:6-111:8::t1 :: "(Data.Heap.Binominal.Tree a)"
111:59-111:61::t2 :: "(Data.Heap.Binominal.Tree a)"
112:5-112:7::ds_d2Y0 :: "a"
112:11-112:13::ds_d2Y4 :: "a"
113:9-113:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
113:25-113:55::_ :: "(Data.Heap.Binominal.Tree a)"
113:53-113:55::lq_anf$##7205759403792805235 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
114:9-114:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
114:25-114:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
114:54-114:56::ds_d2Y0 :: "a"
114:57-114:59::ds_d2Y4 :: "a"
114:60-114:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
115:10-115:16::lq_anf$##7205759403792805245 :: "GHC.Types.Int"
115:11-115:13::ds_d2XZ :: "{v : GHC.Types.Int | v >= 0}"
115:14-115:15::lq_anf$##7205759403792805244 :: "GHC.Types.Int"
115:17-115:19::ds_d2Y0 :: "a"
115:20-115:39::lq_anf$##7205759403792805246 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
115:21-115:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
115:35-115:38::ds_d2Y1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
115:40-115:51::lq_anf$##7205759403792805247 :: "GHC.Types.Int"
115:41-115:44::ds_d2Y2 :: "{v : GHC.Types.Int | 1 <= v}"
115:47-115:50::ds_d2Y6 :: "{v : GHC.Types.Int | 1 <= v}"
117:9-117:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
117:25-117:55::_ :: "(Data.Heap.Binominal.Tree a)"
117:53-117:55::lq_anf$##7205759403792805234 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
118:9-118:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
118:25-118:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
118:54-118:56::ds_d2Y4 :: "a"
118:57-118:59::ds_d2Y0 :: "a"
118:60-118:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
119:10-119:16::lq_anf$##7205759403792805240 :: "GHC.Types.Int"
119:11-119:13::ds_d2Y3 :: "{v : GHC.Types.Int | v >= 0}"
119:14-119:15::lq_anf$##7205759403792805239 :: "GHC.Types.Int"
119:17-119:19::ds_d2Y4 :: "a"
119:20-119:39::lq_anf$##7205759403792805241 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
119:21-119:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
119:35-119:38::ds_d2Y5 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
119:40-119:51::lq_anf$##7205759403792805242 :: "GHC.Types.Int"
119:41-119:44::ds_d2Y2 :: "{v : GHC.Types.Int | 1 <= v}"
119:47-119:50::ds_d2Y6 :: "{v : GHC.Types.Int | 1 <= v}"
123:1-123:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
123:14-123:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
127:1-127:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
127:6-127:7::h :: "(Data.Heap.Binominal.Heap a)"
127:10-127:20::lq_anf$##7205759403792805230 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0\n                     && len (unheap h) <= v}"
127:19-127:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
127:24-127:25::lq_anf$##7205759403792805232 :: "GHC.Types.Int"
131:1-131:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
131:11-131:12::x :: "a"
131:20-131:35::lq_anf$##7205759403792805304 :: "[(Data.Heap.Binominal.Tree a)]"
131:21-131:34::lq_anf$##7205759403792805302 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
131:26-131:27::lq_anf$##7205759403792805298 :: "GHC.Types.Int"
131:28-131:29::x :: "{VV : a | VV == x}"
131:30-131:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
131:33-131:34::lq_anf$##7205759403792805301 :: "GHC.Types.Int"
143:1-143:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
143:8-143:9::x :: "a"
143:22-143:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
143:27-143:55::lq_anf$##7205759403792805262 :: "[(Data.Heap.Binominal.Tree a)]"
143:36-143:51::lq_anf$##7205759403792805261 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
143:42-143:43::lq_anf$##7205759403792805257 :: "GHC.Types.Int"
143:44-143:45::x :: "{VV : a | VV == x}"
143:46-143:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
143:49-143:50::lq_anf$##7205759403792805260 :: "GHC.Types.Int"
143:52-143:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
147:1-147:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
147:9-147:10::t :: "(Data.Heap.Binominal.Tree a)"
147:16-147:19::lq_anf$##7205759403792805249 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
147:17-147:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
149:5-149:11::lq_anf$##7205759403792805250 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
149:10-149:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
149:14-149:21::lq_anf$##7205759403792805251 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
149:19-149:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
149:24-149:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
149:28-149:30::ds_d2Y9 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
150:24-150:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
150:32-150:43::lq_anf$##7205759403792805254 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
150:38-150:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
150:40-150:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
150:44-150:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
155:1-155:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
155:10-155:11::lq_anf$##7205759403792805306 :: "{v : GHC.Prim.Int# | v == 0}"
156:14-156:15::lq_anf$##7205759403792805308 :: "GHC.Types.Int"
156:18-156:24::lq_anf$##7205759403792805309 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
156:22-156:24::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
160:1-160:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
160:15-160:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
161:19-161:41::$dOrd_a2KK :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2KK}"
161:26-161:27::x :: "{VV : a | VV == x}"
161:28-161:41::lq_anf$##7205759403792805296 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
161:38-161:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
203:1-203:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
203:11-203:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
203:18-203:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
203:24-203:34::lq_anf$##7205759403792805318 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
203:37-203:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
209:1-209:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
209:17-209:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
209:41-209:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
209:44-209:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
213:1-213:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
213:23-213:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
213:29-213:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
214:33-214:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
214:52-214:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
214:55-214:62::lq_anf$##7205759403792805311 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
214:56-214:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
214:58-214:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
218:1-218:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}"
218:34-218:36::lq_anf$##7205759403792805314 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
222:1-222:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
222:11-222:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
223:31-223:60::lq_anf$##7205759403792805323 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
223:42-223:60::lq_anf$##7205759403792805322 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
223:58-223:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
224:8-224:42::lq_anf$##7205759403792805327 :: "[(Data.Heap.Binominal.Tree a)]"
224:16-224:37::lq_anf$##7205759403792805326 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
224:33-224:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
224:38-224:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
228:1-228:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}"
228:12-228:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
229:36-229:65::lq_anf$##7205759403792805329 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
229:47-229:65::lq_anf$##7205759403792805328 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
229:63-229:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
230:4-230:10::minElt :: "{VV : a | VV == minElt}"
230:12-230:51::lq_anf$##7205759403792805334 :: "(Data.Heap.Binominal.Heap a)"
230:17-230:51::lq_anf$##7205759403792805333 :: "[(Data.Heap.Binominal.Tree a)]"
230:25-230:46::lq_anf$##7205759403792805332 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
230:42-230:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | len v >= 0\n                                                            && sumSizeList v >= 0\n                                                            && v == ts1}"
230:47-230:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
234:1-234:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
234:18-234:25::lq_anf$##7205759403792805291 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
234:19-234:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
234:22-234:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
236:8-236:10::t' :: "(Data.Heap.Binominal.Tree a)"
236:12-236:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
236:19-236:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
236:30-236:32::ds_d2ZA :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
237:7-237:8::x :: "{VV : a | VV == root t}"
237:11-237:17::_ :: "{VV : a | VV == root t}"
237:16-237:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
238:7-238:9::x' :: "{VV : a | VV == root t'}"
238:12-238:19::_ :: "{VV : a | VV == root t'}"
238:17-238:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
239:7-239:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
239:18-239:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
239:46-239:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
240:7-240:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
240:19-240:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
240:47-240:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
241:6-241:7::x :: "{VV : a | VV == root t\n          && VV == x}"
241:10-241:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
243:9-243:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
243:14-243:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
243:43-243:44::x :: "{VV : a | VV == root t\n          && VV == x}"
243:45-243:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
243:48-243:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
244:9-244:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
244:14-244:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
244:47-244:48::x :: "{VV : a | VV == root t\n          && VV == x}"
244:49-244:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
244:52-244:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
245:6-245:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
245:9-245:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
245:12-245:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && len v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && v == tl}"
247:9-247:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
247:14-247:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
247:43-247:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
247:46-247:47::x :: "{VV : a | VV == root t\n          && VV == x}"
247:48-247:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
248:6-248:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
248:10-248:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
248:13-248:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
261:1-261:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
261:31-261:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
261:36-261:52::lq_anf$##7205759403792805283 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
261:44-261:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
261:48-261:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
265:1-265:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
265:8-265:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
265:17-265:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
266:17-266:20::ds_d2Yv :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
268:5-268:12::lq_anf$##7205759403792805267 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
268:10-268:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
268:15-268:22::lq_anf$##7205759403792805268 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
268:20-268:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
268:25-268:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
268:30-268:45::lq_anf$##7205759403792805278 :: "[(Data.Heap.Binominal.Tree a)]"
268:37-268:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
268:42-268:45::ds_d2Yv :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
269:5-269:12::lq_anf$##7205759403792805271 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
269:10-269:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
269:15-269:22::lq_anf$##7205759403792805272 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
269:20-269:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
269:25-269:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
269:30-269:45::lq_anf$##7205759403792805277 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
269:37-269:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
269:41-269:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
270:25-270:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
270:33-270:45::lq_anf$##7205759403792805275 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
270:39-270:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
270:42-270:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
270:46-270:64::lq_anf$##7205759403792805276 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
270:54-270:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
270:59-270:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
287:1-287:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}"
287:22-287:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
289:8-289:14::minElt :: "a"
289:16-289:18::h' :: "(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})"
289:22-289:34::_ :: "(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))"
289:33-289:34::ds_d30p :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
290:3-290:9::minElt :: "{VV : a | VV == minElt}"
290:12-290:23::lq_anf$##7205759403792805337 :: "{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}"
290:21-290:23::h' :: "{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}"
294:1-294:14::Data.Heap.Binominal.sortUsingHeap :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}"
294:17-294:25::lq_anf$##7205759403792805338 :: "x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}"
294:28-294:36::lq_anf$##7205759403792805339 :: "x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}"