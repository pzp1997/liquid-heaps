1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
44:1-44:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
44:18-44:19::lq_anf$##7205759403792807040 :: "{v : GHC.Prim.Int# | v == 0}"
45:22-45:28::lq_anf$##7205759403792807041 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
45:27-45:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
45:31-45:45::lq_anf$##7205759403792807042 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0\n                     && len xs <= v}"
45:43-45:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
50:1-50:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0\n                                                         && len (unheap x1) <= VV}"
50:22-50:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
50:34-50:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
79:1-79:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
80:3-80:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
80:14-80:15::ds_d3qs :: "{v : GHC.Types.Int | v >= 0}"
80:22-80:23::ds_d3qt :: "a"
80:34-80:36::ds_d3qu :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
80:43-80:45::ds_d3qv :: "{v : GHC.Types.Int | 1 <= v}"
85:1-85:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
85:30-85:31::x :: "a"
85:32-85:33::y :: "{VV : a | x <= VV}"
85:34-85:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
89:1-89:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
89:34-89:35::x :: "a"
89:36-89:37::y :: "{VV : a | x <= VV}"
89:38-89:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
93:1-93:17::Data.Heap.Binominal.sublistSizeLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> x2:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV >= 0\n                                                                                              && VV == size x1 + sumSizeList x2\n                                                                                              && sumSizeList x2 < VV}"
93:18-93:19::x :: "(Data.Heap.Binominal.Tree a)"
93:20-93:22::xs :: "[(Data.Heap.Binominal.Tree a)]"
94:3-94:22::lq_anf$##7205759403792807114 :: "GHC.Types.Int -> GHC.Types.Int"
94:10-94:22::lq_anf$##7205759403792807113 :: "GHC.Types.Bool"
94:11-94:12::lq_anf$##7205759403792807111 :: "GHC.Types.Int"
94:15-94:21::lq_anf$##7205759403792807112 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
94:20-94:21::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
95:3-95:23::lq_anf$##7205759403792807116 :: "{v : GHC.Types.Int | v >= 0}"
95:15-95:23::lq_anf$##7205759403792807115 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == xs\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts xs)\n                                      && len v == 1 + len xs\n                                      && sumSizeList v == size x + sumSizeList xs}"
95:16-95:17::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
95:20-95:22::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
102:1-102:23::Data.Heap.Binominal.subtreeTransitiveLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                     && x1 <= VV} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x3}]"
102:26-102:28::ts :: "[(Data.Heap.Binominal.Tree a)]"
106:1-106:14::Data.Heap.Binominal.consTreeLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : (Data.Heap.Binominal.Tree a) | size VV <= x1} -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= x1}]"
106:17-106:18::t :: "(Data.Heap.Binominal.Tree a)"
106:19-106:21::ts :: "[(Data.Heap.Binominal.Tree a)]"
106:24-106:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
106:28-106:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
110:1-110:10::Data.Heap.Binominal.testTrick :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [{t : (Data.Heap.Binominal.Tree a) | size t < x1}] | VV /= []} -> {t : (Data.Heap.Binominal.Tree a) | size t < x1}"
110:22-110:23::h :: "{v : (Data.Heap.Binominal.Tree a) | v == h}"
114:1-114:24::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
114:30-114:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
116:7-116:9::ih :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
116:12-116:38::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
116:36-116:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
117:7-117:14::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
117:17-117:38::_ :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v}"
117:34-117:35::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
117:36-117:38::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
118:7-118:13::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
118:16-118:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
118:28-118:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
119:7-119:22::refinedSubtrees :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
119:25-119:65::_ :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}]"
119:48-119:54::sizets :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v\n                     && v == sizets}"
119:55-119:57::ih :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && v == ih}"
119:58-119:65::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
120:17-120:24::sizetts :: "{v : GHC.Types.Int | v >= 0\n                     && v == size t + sumSizeList ts\n                     && sumSizeList ts < v\n                     && v == sizetts}"
120:25-120:26::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
120:27-120:42::refinedSubtrees :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sizetts}] | sumSizeList v >= 0\n                                                                && len v >= 0\n                                                                && v == refinedSubtrees}"
147:1-147:33::Data.Heap.Binominal.strictTransitivitySizeBoundLemma :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV <= x1}] -> x3:{VV : GHC.Types.Int | VV >= 0\n                                                                                                                       && x1 < VV} -> [{VV : (Data.Heap.Binominal.Tree a) | size VV < x3}]"
147:36-147:38::ts :: "[(Data.Heap.Binominal.Tree a)]"
152:1-152:9::Data.Heap.Binominal.eltsTree :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Set.Internal.Set a)"
152:10-152:11::t :: "(Data.Heap.Binominal.Tree a)"
153:7-153:25::boundBySumSizeList :: "[{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}]"
153:28-153:56::Data.Heap.Binominal.boundedSizeSubtreeLemma :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> [{t : (Data.Heap.Binominal.Tree a) | size t <= sumSizeList x1}]"
153:53-153:55::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == ts}"
154:7-154:25::boundByOverallSize :: "[(Data.Heap.Binominal.Tree a)]"
154:28-154:105::_ :: "[(Data.Heap.Binominal.Tree a)]"
154:61-154:77::lq_anf$##7205759403792807119 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
154:74-154:76::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == ts}"
154:78-154:96::boundBySumSizeList :: "{v : [{v : (Data.Heap.Binominal.Tree a) | size v <= sumSizeList ts}] | sumSizeList v >= 0\n                                                                       && len v >= 0\n                                                                       && v == boundBySumSizeList}"
154:97-154:105::lq_anf$##7205759403792807120 :: "{v : GHC.Types.Int | 1 <= v}"
154:103-154:104::lq_anf$##7205759403792807118 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && rank v == r\n                                    && v == Node r x ts sz}"
156:3-156:35::lq_anf$##7205759403792807124 :: "(Data.Set.Internal.Set a) -> (Data.Set.Internal.Set a)"
156:10-156:35::lq_anf$##7205759403792807123 :: "GHC.Types.Bool"
156:11-156:25::lq_anf$##7205759403792807121 :: "{v : GHC.Types.Int | v == sumSizeList ts\n                     && v >= 0\n                     && len ts <= v}"
156:23-156:25::ts :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == ts}"
156:28-156:34::lq_anf$##7205759403792807122 :: "{v : GHC.Types.Int | 1 <= v}"
156:33-156:34::lq_anf$##7205759403792807118 :: "{v : (Data.Heap.Binominal.Tree a) | v == t\n                                    && size v == sz\n                                    && subtrees v == ts\n                                    && root v == x\n                                    && rank v == r\n                                    && v == Node r x ts sz}"
157:3-157:72::lq_anf$##7205759403792807129 :: "(Data.Set.Internal.Set a)"
157:15-157:22::lq_anf$##7205759403792807125 :: "x1:(Data.Set.Internal.Set a) -> x2:(Data.Set.Internal.Set a) -> {v : (Data.Set.Internal.Set a) | v == Set_cup x1 x2}"
157:23-157:38::lq_anf$##7205759403792807126 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng x}"
157:36-157:37::x :: "{VV : a | VV == x}"
157:39-157:72::lq_anf$##7205759403792807128 :: "{v : [(Data.Set.Internal.Set a)] | len v == len boundByOverallSize}"
157:44-157:52::lq_anf$##7205759403792807127 :: "(Data.Heap.Binominal.Tree a) -> (Data.Set.Internal.Set a)"
157:53-157:71::boundByOverallSize :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == boundByOverallSize}"
166:1-166:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
166:10-166:11::x :: "a"
170:1-170:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
170:23-170:24::x :: "a"
174:1-174:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
174:27-174:28::x :: "a"
178:1-178:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
178:6-178:8::t1 :: "(Data.Heap.Binominal.Tree a)"
178:59-178:61::t2 :: "(Data.Heap.Binominal.Tree a)"
179:5-179:7::ds_d3qT :: "a"
179:11-179:13::ds_d3qX :: "a"
180:9-180:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
180:25-180:55::_ :: "(Data.Heap.Binominal.Tree a)"
180:53-180:55::lq_anf$##7205759403792807049 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
181:9-181:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
181:25-181:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
181:54-181:56::ds_d3qT :: "a"
181:57-181:59::ds_d3qX :: "a"
181:60-181:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
182:10-182:16::lq_anf$##7205759403792807059 :: "GHC.Types.Int"
182:11-182:13::ds_d3qS :: "{v : GHC.Types.Int | v >= 0}"
182:14-182:15::lq_anf$##7205759403792807058 :: "GHC.Types.Int"
182:17-182:19::ds_d3qT :: "a"
182:20-182:39::lq_anf$##7205759403792807060 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
182:21-182:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
182:35-182:38::ds_d3qU :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
182:40-182:51::lq_anf$##7205759403792807061 :: "GHC.Types.Int"
182:41-182:44::ds_d3qV :: "{v : GHC.Types.Int | 1 <= v}"
182:47-182:50::ds_d3qZ :: "{v : GHC.Types.Int | 1 <= v}"
184:9-184:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
184:25-184:55::_ :: "(Data.Heap.Binominal.Tree a)"
184:53-184:55::lq_anf$##7205759403792807048 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
185:9-185:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
185:25-185:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
185:54-185:56::ds_d3qX :: "a"
185:57-185:59::ds_d3qT :: "a"
185:60-185:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
186:10-186:16::lq_anf$##7205759403792807054 :: "GHC.Types.Int"
186:11-186:13::ds_d3qW :: "{v : GHC.Types.Int | v >= 0}"
186:14-186:15::lq_anf$##7205759403792807053 :: "GHC.Types.Int"
186:17-186:19::ds_d3qX :: "a"
186:20-186:39::lq_anf$##7205759403792807055 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
186:21-186:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
186:35-186:38::ds_d3qY :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
186:40-186:51::lq_anf$##7205759403792807056 :: "GHC.Types.Int"
186:41-186:44::ds_d3qV :: "{v : GHC.Types.Int | 1 <= v}"
186:47-186:50::ds_d3qZ :: "{v : GHC.Types.Int | 1 <= v}"
190:1-190:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
190:14-190:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
194:1-194:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
194:6-194:7::h :: "(Data.Heap.Binominal.Heap a)"
194:10-194:20::lq_anf$##7205759403792807044 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0\n                     && len (unheap h) <= v}"
194:19-194:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
194:24-194:25::lq_anf$##7205759403792807046 :: "GHC.Types.Int"
198:1-198:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
198:11-198:12::x :: "a"
198:20-198:35::lq_anf$##7205759403792807140 :: "[(Data.Heap.Binominal.Tree a)]"
198:21-198:34::lq_anf$##7205759403792807138 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
198:26-198:27::lq_anf$##7205759403792807134 :: "GHC.Types.Int"
198:28-198:29::x :: "{VV : a | VV == x}"
198:30-198:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
198:33-198:34::lq_anf$##7205759403792807137 :: "GHC.Types.Int"
210:1-210:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
210:8-210:9::x :: "a"
210:22-210:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
210:27-210:55::lq_anf$##7205759403792807076 :: "[(Data.Heap.Binominal.Tree a)]"
210:36-210:51::lq_anf$##7205759403792807075 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
210:42-210:43::lq_anf$##7205759403792807071 :: "GHC.Types.Int"
210:44-210:45::x :: "{VV : a | VV == x}"
210:46-210:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
210:49-210:50::lq_anf$##7205759403792807074 :: "GHC.Types.Int"
210:52-210:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
214:1-214:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
214:9-214:10::t :: "(Data.Heap.Binominal.Tree a)"
214:16-214:19::lq_anf$##7205759403792807063 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && sumSizeList v == 0}"
214:17-214:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
216:5-216:11::lq_anf$##7205759403792807064 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
216:10-216:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
216:14-216:21::lq_anf$##7205759403792807065 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
216:19-216:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
216:24-216:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
216:28-216:30::ds_d3r2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
217:24-217:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
217:32-217:43::lq_anf$##7205759403792807068 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
217:38-217:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
217:40-217:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
217:44-217:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}"
222:1-222:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
222:10-222:11::lq_anf$##7205759403792807142 :: "{v : GHC.Prim.Int# | v == 0}"
223:14-223:15::lq_anf$##7205759403792807144 :: "GHC.Types.Int"
223:18-223:24::lq_anf$##7205759403792807145 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
223:22-223:24::xs :: "{v : [a] | sumSizeList v >= 0\n           && len v >= 0\n           && v == xs}"
227:1-227:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
227:15-227:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
228:19-228:41::$dOrd_a3aC :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a3aC}"
228:26-228:27::x :: "{VV : a | VV == x}"
228:28-228:41::lq_anf$##7205759403792807132 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
228:38-228:40::xs :: "{v : [a] | sumSizeList v >= 0\n           && len v >= 0\n           && v == xs}"
270:1-270:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
270:11-270:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
270:18-270:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
270:24-270:34::lq_anf$##7205759403792807154 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
270:37-270:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
276:1-276:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
276:17-276:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
276:41-276:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
276:44-276:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
280:1-280:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
280:23-280:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
280:29-280:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}"
281:33-281:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
281:52-281:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
281:55-281:62::lq_anf$##7205759403792807147 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
281:56-281:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
281:58-281:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}"
285:1-285:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}"
285:34-285:36::lq_anf$##7205759403792807150 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
289:1-289:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
289:11-289:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
290:31-290:60::lq_anf$##7205759403792807159 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
290:42-290:60::lq_anf$##7205759403792807158 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
290:58-290:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
291:8-291:42::lq_anf$##7205759403792807163 :: "[(Data.Heap.Binominal.Tree a)]"
291:16-291:37::lq_anf$##7205759403792807162 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
291:33-291:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
291:38-291:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
295:1-295:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}"
295:12-295:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
296:36-296:65::lq_anf$##7205759403792807165 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
296:47-296:65::lq_anf$##7205759403792807164 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
296:63-296:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
297:4-297:10::minElt :: "{VV : a | VV == minElt}"
297:12-297:51::lq_anf$##7205759403792807170 :: "(Data.Heap.Binominal.Heap a)"
297:17-297:51::lq_anf$##7205759403792807169 :: "[(Data.Heap.Binominal.Tree a)]"
297:25-297:46::lq_anf$##7205759403792807168 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
297:42-297:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && v == ts1}"
297:47-297:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
301:1-301:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
301:18-301:25::lq_anf$##7205759403792807105 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && sumSizeList v == 0}"
301:19-301:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
301:22-301:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
303:8-303:10::t' :: "(Data.Heap.Binominal.Tree a)"
303:12-303:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
303:19-303:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
303:30-303:32::ds_d3st :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
304:7-304:8::x :: "{VV : a | VV == root t}"
304:11-304:17::_ :: "{VV : a | VV == root t}"
304:16-304:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
305:7-305:9::x' :: "{VV : a | VV == root t'}"
305:12-305:19::_ :: "{VV : a | VV == root t'}"
305:17-305:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
306:7-306:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
306:18-306:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
306:46-306:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
307:7-307:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
307:19-307:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
307:47-307:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
308:6-308:7::x :: "{VV : a | VV == root t\n          && VV == x}"
308:10-308:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
310:9-310:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
310:14-310:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
310:43-310:44::x :: "{VV : a | VV == root t\n          && VV == x}"
310:45-310:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
310:48-310:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
311:9-311:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
311:14-311:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
311:47-311:48::x :: "{VV : a | VV == root t\n          && VV == x}"
311:49-311:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
311:52-311:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
312:6-312:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
312:9-312:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
312:12-312:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == tl}"
314:9-314:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
314:14-314:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
314:43-314:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
314:46-314:47::x :: "{VV : a | VV == root t\n          && VV == x}"
314:48-314:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
315:6-315:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
315:10-315:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
315:13-315:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
328:1-328:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
328:31-328:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
328:36-328:52::lq_anf$##7205759403792807097 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
328:44-328:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
328:48-328:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
332:1-332:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
332:8-332:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
332:17-332:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
333:17-333:20::ds_d3ro :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
335:5-335:12::lq_anf$##7205759403792807081 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
335:10-335:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
335:15-335:22::lq_anf$##7205759403792807082 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
335:20-335:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
335:25-335:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
335:30-335:45::lq_anf$##7205759403792807092 :: "[(Data.Heap.Binominal.Tree a)]"
335:37-335:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
335:42-335:45::ds_d3ro :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
336:5-336:12::lq_anf$##7205759403792807085 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
336:10-336:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
336:15-336:22::lq_anf$##7205759403792807086 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
336:20-336:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
336:25-336:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
336:30-336:45::lq_anf$##7205759403792807091 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
336:37-336:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
336:41-336:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"
337:25-337:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
337:33-337:45::lq_anf$##7205759403792807089 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
337:39-337:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
337:42-337:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
337:46-337:64::lq_anf$##7205759403792807090 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
337:54-337:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
337:59-337:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"
353:1-353:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}"
353:22-353:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && sumSizeList v == 0}"
355:8-355:14::minElt :: "a"
355:16-355:18::h' :: "(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})"
355:22-355:34::_ :: "(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))"
355:33-355:34::ds_d3ti :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
356:3-356:9::minElt :: "{VV : a | VV == minElt}"
356:12-356:23::lq_anf$##7205759403792807173 :: "{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}"
356:21-356:23::h' :: "{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}"
360:1-360:14::Data.Heap.Binominal.sortUsingHeap :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}"
360:17-360:25::lq_anf$##7205759403792807174 :: "x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}"
360:28-360:36::lq_anf$##7205759403792807175 :: "x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}"