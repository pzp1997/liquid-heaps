1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
44:1-44:8::Data.Heap.Binominal.mapSize :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : [{VV : GHC.Types.Int | 1 <= VV}] | VV == mapSize x1\n                                                                              && len VV == len x1}"
44:14-44:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
45:18-45:24::lq_anf$##7205759403792804965 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
45:23-45:24::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
45:27-45:37::lq_anf$##7205759403792804966 :: "{v : [{v : GHC.Types.Int | 1 <= v}] | v == mapSize xs\n                                      && len v == len xs}"
45:35-45:37::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
50:1-50:13::Data.Heap.Binominal.sumPositives :: "x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}"
50:19-50:20::lq_anf$##7205759403792804968 :: "{v : GHC.Prim.Int# | v == 0}"
51:23-51:24::x :: "{v : GHC.Types.Int | 1 <= v\n                     && v == x}"
51:27-51:42::lq_anf$##7205759403792804969 :: "{v : GHC.Types.Int | v == sumPositives xs\n                     && v >= 0\n                     && len xs <= v}"
51:40-51:42::xs :: "{v : [{v : GHC.Types.Int | 1 <= v}] | len v >= 0\n                                      && v == xs}"
56:1-56:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
56:18-56:19::lq_anf$##7205759403792804972 :: "{v : GHC.Prim.Int# | v == 0}"
57:18-57:43::Data.Heap.Binominal.sumPositives :: "x1:[{VV : GHC.Types.Int | 1 <= VV}] -> {VV : GHC.Types.Int | VV == sumPositives x1\n                                                             && VV >= 0\n                                                             && len x1 <= VV}"
57:31-57:43::lq_anf$##7205759403792804971 :: "[{v : GHC.Types.Int | 1 <= v}]"
57:40-57:42::ds_d2WE :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
68:1-68:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}"
68:22-68:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : GHC.Types.Int | v == sumSizeList x1\n                                                          && v >= 0\n                                                          && len x1 <= v}"
68:34-68:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
97:1-97:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
98:3-98:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
98:14-98:15::ds_d2T8 :: "{v : GHC.Types.Int | v >= 0}"
98:22-98:23::ds_d2T9 :: "a"
98:34-98:36::ds_d2Ta :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
98:43-98:45::ds_d2Tb :: "{v : GHC.Types.Int | 1 <= v}"
103:1-103:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
103:30-103:31::x :: "a"
103:32-103:33::y :: "{VV : a | x <= VV}"
103:34-103:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
107:1-107:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
107:34-107:35::x :: "a"
107:36-107:37::y :: "{VV : a | x <= VV}"
107:38-107:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
143:1-143:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
143:10-143:11::x :: "a"
147:1-147:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
147:23-147:24::x :: "a"
151:1-151:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
151:27-151:28::x :: "a"
155:1-155:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
155:6-155:8::t1 :: "(Data.Heap.Binominal.Tree a)"
155:59-155:61::t2 :: "(Data.Heap.Binominal.Tree a)"
156:5-156:7::ds_d2Tz :: "a"
156:11-156:13::ds_d2TD :: "a"
157:9-157:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
157:25-157:55::_ :: "(Data.Heap.Binominal.Tree a)"
157:53-157:55::lq_anf$##7205759403792804981 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
158:9-158:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
158:25-158:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
158:54-158:56::ds_d2Tz :: "a"
158:57-158:59::ds_d2TD :: "a"
158:60-158:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
159:10-159:16::lq_anf$##7205759403792804991 :: "GHC.Types.Int"
159:11-159:13::ds_d2Ty :: "{v : GHC.Types.Int | v >= 0}"
159:14-159:15::lq_anf$##7205759403792804990 :: "GHC.Types.Int"
159:17-159:19::ds_d2Tz :: "a"
159:20-159:39::lq_anf$##7205759403792804992 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
159:21-159:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
159:35-159:38::ds_d2TA :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
159:40-159:51::lq_anf$##7205759403792804993 :: "GHC.Types.Int"
159:41-159:44::ds_d2TB :: "{v : GHC.Types.Int | 1 <= v}"
159:47-159:50::ds_d2TF :: "{v : GHC.Types.Int | 1 <= v}"
161:9-161:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
161:25-161:55::_ :: "(Data.Heap.Binominal.Tree a)"
161:53-161:55::lq_anf$##7205759403792804980 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
162:9-162:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
162:25-162:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
162:54-162:56::ds_d2TD :: "a"
162:57-162:59::ds_d2Tz :: "a"
162:60-162:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
163:10-163:16::lq_anf$##7205759403792804986 :: "GHC.Types.Int"
163:11-163:13::ds_d2TC :: "{v : GHC.Types.Int | v >= 0}"
163:14-163:15::lq_anf$##7205759403792804985 :: "GHC.Types.Int"
163:17-163:19::ds_d2TD :: "a"
163:20-163:39::lq_anf$##7205759403792804987 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
163:21-163:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
163:35-163:38::ds_d2TE :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
163:40-163:51::lq_anf$##7205759403792804988 :: "GHC.Types.Int"
163:41-163:44::ds_d2TB :: "{v : GHC.Types.Int | 1 <= v}"
163:47-163:50::ds_d2TF :: "{v : GHC.Types.Int | 1 <= v}"
167:1-167:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
167:14-167:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
171:1-171:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
171:6-171:7::h :: "(Data.Heap.Binominal.Heap a)"
171:10-171:20::lq_anf$##7205759403792804976 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}"
171:19-171:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
171:24-171:25::lq_anf$##7205759403792804978 :: "GHC.Types.Int"
175:1-175:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
175:11-175:12::x :: "a"
175:20-175:35::lq_anf$##7205759403792805050 :: "[(Data.Heap.Binominal.Tree a)]"
175:21-175:34::lq_anf$##7205759403792805048 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
175:26-175:27::lq_anf$##7205759403792805044 :: "GHC.Types.Int"
175:28-175:29::x :: "{VV : a | VV == x}"
175:30-175:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
175:33-175:34::lq_anf$##7205759403792805047 :: "GHC.Types.Int"
187:1-187:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
187:8-187:9::x :: "a"
187:22-187:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
187:27-187:55::lq_anf$##7205759403792805008 :: "[(Data.Heap.Binominal.Tree a)]"
187:36-187:51::lq_anf$##7205759403792805007 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
187:42-187:43::lq_anf$##7205759403792805003 :: "GHC.Types.Int"
187:44-187:45::x :: "{VV : a | VV == x}"
187:46-187:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
187:49-187:50::lq_anf$##7205759403792805006 :: "GHC.Types.Int"
187:52-187:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
191:1-191:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
191:9-191:10::t :: "(Data.Heap.Binominal.Tree a)"
191:16-191:19::lq_anf$##7205759403792804995 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}"
191:17-191:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
193:5-193:11::lq_anf$##7205759403792804996 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
193:10-193:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
193:14-193:21::lq_anf$##7205759403792804997 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
193:19-193:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
193:24-193:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
193:28-193:30::ds_d2TI :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
194:24-194:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
194:32-194:43::lq_anf$##7205759403792805000 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
194:38-194:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
194:40-194:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
194:44-194:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts'}"
199:1-199:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
199:10-199:11::lq_anf$##7205759403792805052 :: "{v : GHC.Prim.Int# | v == 0}"
200:14-200:15::lq_anf$##7205759403792805054 :: "GHC.Types.Int"
200:18-200:24::lq_anf$##7205759403792805055 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
200:22-200:24::xs :: "{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}"
204:1-204:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
204:15-204:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
205:19-205:41::$dOrd_a2G1 :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2G1}"
205:26-205:27::x :: "{VV : a | VV == x}"
205:28-205:41::lq_anf$##7205759403792805042 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
205:38-205:40::xs :: "{v : [a] | sumSizeList v >= 0\n           && sumPositives v >= 0\n           && len v >= 0\n           && v == xs}"
247:1-247:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
247:11-247:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
247:18-247:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
247:24-247:34::lq_anf$##7205759403792805064 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
247:37-247:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
253:1-253:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
253:17-253:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
253:41-253:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
253:44-253:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
257:1-257:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
257:23-257:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
257:29-257:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}"
258:33-258:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
258:52-258:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == xs}"
258:55-258:62::lq_anf$##7205759403792805057 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && listElts v == Set_cup (Set_sng x) (listElts acc)\n                                      && len v == 1 + len acc\n                                      && mapSize v == : (size x) (mapSize acc)\n                                      && sumPositives v == x + sumPositives acc\n                                      && sumSizeList v == sumPositives (mapSize (: x acc))}"
258:56-258:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
258:58-258:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == acc}"
262:1-262:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}"
262:34-262:36::lq_anf$##7205759403792805060 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts}"
266:1-266:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
266:11-266:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
267:31-267:60::lq_anf$##7205759403792805069 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
267:42-267:60::lq_anf$##7205759403792805068 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
267:58-267:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
268:8-268:42::lq_anf$##7205759403792805073 :: "[(Data.Heap.Binominal.Tree a)]"
268:16-268:37::lq_anf$##7205759403792805072 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
268:33-268:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
268:38-268:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
272:1-272:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}"
272:12-272:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
273:36-273:65::lq_anf$##7205759403792805075 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
273:47-273:65::lq_anf$##7205759403792805074 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
273:63-273:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
274:4-274:10::minElt :: "{VV : a | VV == minElt}"
274:12-274:51::lq_anf$##7205759403792805080 :: "(Data.Heap.Binominal.Heap a)"
274:17-274:51::lq_anf$##7205759403792805079 :: "[(Data.Heap.Binominal.Tree a)]"
274:25-274:46::lq_anf$##7205759403792805078 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
274:42-274:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | sumSizeList v >= 0\n                                                            && len v >= 0\n                                                            && v == ts1}"
274:47-274:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
278:1-278:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
278:18-278:25::lq_anf$##7205759403792805037 :: "{v : [(Data.Heap.Binominal.Tree a)] | Set_emp (listElts v)\n                                      && len v == 0\n                                      && mapSize v == []\n                                      && sumPositives v == 0\n                                      && sumSizeList v == 0}"
278:19-278:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
278:22-278:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
280:8-280:10::t' :: "(Data.Heap.Binominal.Tree a)"
280:12-280:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
280:19-280:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
280:30-280:32::ds_d2V9 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
281:7-281:8::x :: "{VV : a | VV == root t}"
281:11-281:17::_ :: "{VV : a | VV == root t}"
281:16-281:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
282:7-282:9::x' :: "{VV : a | VV == root t'}"
282:12-282:19::_ :: "{VV : a | VV == root t'}"
282:17-282:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
283:7-283:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
283:18-283:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
283:46-283:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
284:7-284:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
284:19-284:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
284:47-284:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
285:6-285:7::x :: "{VV : a | VV == root t\n          && VV == x}"
285:10-285:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
287:9-287:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
287:14-287:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
287:43-287:44::x :: "{VV : a | VV == root t\n          && VV == x}"
287:45-287:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
287:48-287:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
288:9-288:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
288:14-288:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
288:47-288:48::x :: "{VV : a | VV == root t\n          && VV == x}"
288:49-288:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
288:52-288:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
289:6-289:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
289:9-289:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
289:12-289:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && sumSizeList v >= 0\n                                                       && len v >= 0\n                                                       && v == tl}"
291:9-291:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
291:14-291:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
291:43-291:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
291:46-291:47::x :: "{VV : a | VV == root t\n          && VV == x}"
291:48-291:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
292:6-292:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
292:10-292:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
292:13-292:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
305:1-305:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
305:31-305:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
305:36-305:52::lq_anf$##7205759403792805029 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
305:44-305:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
305:48-305:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2}"
309:1-309:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
309:8-309:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
309:17-309:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
310:17-310:20::ds_d2U4 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
312:5-312:12::lq_anf$##7205759403792805013 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
312:10-312:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
312:15-312:22::lq_anf$##7205759403792805014 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
312:20-312:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
312:25-312:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
312:30-312:45::lq_anf$##7205759403792805024 :: "[(Data.Heap.Binominal.Tree a)]"
312:37-312:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
312:42-312:45::ds_d2U4 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0}"
313:5-313:12::lq_anf$##7205759403792805017 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
313:10-313:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
313:15-313:22::lq_anf$##7205759403792805018 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
313:20-313:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
313:25-313:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
313:30-313:45::lq_anf$##7205759403792805023 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
313:37-313:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1}"
313:41-313:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"
314:25-314:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
314:33-314:45::lq_anf$##7205759403792805021 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
314:39-314:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
314:42-314:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
314:46-314:64::lq_anf$##7205759403792805022 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
314:54-314:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts1'}"
314:59-314:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v >= 0\n                                      && len v >= 0\n                                      && v == ts2'}"
330:1-330:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize x2}"
330:22-330:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                            && len v == 0\n                                            && mapSize v == []\n                                            && sumPositives v == 0\n                                            && sumSizeList v == 0}"
332:8-332:14::minElt :: "a"
332:16-332:18::h' :: "(Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                    && VV >= minElt})"
332:22-332:34::_ :: "(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))"
332:33-332:34::ds_d2VY :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
333:3-333:9::minElt :: "{VV : a | VV == minElt}"
333:12-333:23::lq_anf$##7205759403792805083 :: "{VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == heapSize h'}"
333:21-333:23::h' :: "{v : (Data.Heap.Binominal.Heap {VV : a | minElt <= VV\n                                         && VV >= minElt}) | heapSize v >= 0\n                                                             && v == h'}"
337:1-337:14::Data.Heap.Binominal.sortUsingHeap :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a]<\\x1 VV -> {VV : a | x1 <= VV}> | len VV == len x2}"
337:17-337:25::lq_anf$##7205759403792805084 :: "x1:(Data.Heap.Binominal.Heap a) -> {v : [a]<\\x5 VV -> {VV : a | x5 <= VV}> | len v == heapSize x1}"
337:28-337:36::lq_anf$##7205759403792805085 :: "x1:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x1}"