1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
59:1-59:5::Data.Heap.Binominal.rank :: "forall a . (Data.Heap.Binominal.Tree a) -> GHC.Types.Int"
59:27-59:28::ds_d3fC :: "{v : GHC.Types.Int | v >= 0}"
63:1-63:5::Data.Heap.Binominal.root :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
63:27-63:28::ds_d3f6 :: "a"
69:1-69:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV})"
70:3-70:39::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : (Data.Heap.Binominal.Tree a) | subtrees v == x3\n                                                                                                                                      && _root v == x2\n                                                                                                                                      && _rank v == x1\n                                                                                                                                      && root v == x2}"
70:15-70:16::ds_d3es :: "{v : GHC.Types.Int | v >= 0}"
70:24-70:25::ds_d3et :: "a"
70:36-70:38::ds_d3eu :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
74:1-74:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> (Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV})"
74:30-74:31::x :: "a"
74:32-74:33::y :: "{VV : a | x <= VV}"
74:34-74:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
84:1-84:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
84:10-84:11::x :: "a"
87:1-87:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree a) -> (Data.Heap.Binominal.Tree a)"
87:6-87:8::t1 :: "(Data.Heap.Binominal.Tree a)"
87:51-87:53::t2 :: "(Data.Heap.Binominal.Tree a)"
88:5-88:7::ds_d3eQ :: "a"
88:11-88:13::ds_d3eT :: "a"
89:9-89:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
89:25-89:55::_ :: "(Data.Heap.Binominal.Tree a)"
89:53-89:55::lq_anf$##7205759403792806226 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
90:9-90:22::t2BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
90:25-90:73::_ :: "(Data.Heap.Binominal.Tree a)"
90:54-90:56::ds_d3eQ :: "a"
90:57-90:59::ds_d3eT :: "a"
90:60-90:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
91:10-91:16::lq_anf$##7205759403792806235 :: "GHC.Types.Int"
91:11-91:13::ds_d3eP :: "{v : GHC.Types.Int | v >= 0}"
91:14-91:15::lq_anf$##7205759403792806234 :: "GHC.Types.Int"
91:17-91:19::ds_d3eQ :: "a"
91:20-91:39::lq_anf$##7205759403792806236 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
91:21-91:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX1}"
91:35-91:38::ds_d3eR :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
93:9-93:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
93:25-93:55::_ :: "(Data.Heap.Binominal.Tree a)"
93:53-93:55::lq_anf$##7205759403792806225 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
94:9-94:22::t1BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
94:25-94:73::_ :: "(Data.Heap.Binominal.Tree a)"
94:54-94:56::ds_d3eT :: "a"
94:57-94:59::ds_d3eQ :: "a"
94:60-94:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
95:12-95:18::lq_anf$##7205759403792806231 :: "GHC.Types.Int"
95:13-95:15::ds_d3eS :: "{v : GHC.Types.Int | v >= 0}"
95:16-95:17::lq_anf$##7205759403792806230 :: "GHC.Types.Int"
95:19-95:21::ds_d3eT :: "a"
95:22-95:41::lq_anf$##7205759403792806232 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
95:23-95:36::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX2}"
95:37-95:40::ds_d3eU :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
99:1-99:6::Data.Heap.Binominal.empty :: "forall a . (Data.Heap.Binominal.Heap a)"
104:1-104:5::Data.Heap.Binominal.null :: "forall a . (Data.Heap.Binominal.Heap a) -> GHC.Types.Bool"
108:1-108:10::Data.Heap.Binominal.singleton :: "forall a . a -> (Data.Heap.Binominal.Heap a)"
108:11-108:12::x :: "a"
108:21-108:32::lq_anf$##7205759403792806293 :: "{v : (Data.Heap.Binominal.Tree a) | _root v == x\n                                    && root v == x}"
108:26-108:27::lq_anf$##7205759403792806291 :: "GHC.Types.Int"
108:28-108:29::x :: "{VV : a | VV == x}"
108:30-108:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0}"
120:1-120:7::Data.Heap.Binominal.sumNat :: "{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | VV >= 0}"
120:8-120:9::x :: "{VV : GHC.Types.Int | VV >= 0}"
120:10-120:11::y :: "{VV : GHC.Types.Int | VV >= 0}"
120:14-120:15::x :: "{v : GHC.Types.Int | v >= 0\n                     && v == x}"
120:18-120:19::y :: "{v : GHC.Types.Int | v >= 0\n                     && v == y}"
124:1-124:11::Data.Heap.Binominal.sumNatList :: "[{VV : GHC.Types.Int | VV >= 0}] -> {VV : GHC.Types.Int | VV >= 0}"
124:17-124:18::lq_anf$##7205759403792806297 :: "{v : GHC.Prim.Int# | v == 0}"
125:21-125:45::Data.Heap.Binominal.sumNat :: "{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v >= 0}"
125:28-125:29::x :: "{v : GHC.Types.Int | v >= 0\n                     && v == x}"
125:30-125:45::lq_anf$##7205759403792806298 :: "{v : GHC.Types.Int | v >= 0}"
125:42-125:44::xs :: "{v : [{v : GHC.Types.Int | v >= 0}] | len v >= 0\n                                      && v == xs}"
142:1-142:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
142:8-142:9::x :: "a"
142:36-142:49::lq_anf$##7205759403792806247 :: "{v : (Data.Heap.Binominal.Tree a) | _root v == x\n                                    && root v == x}"
142:42-142:43::lq_anf$##7205759403792806245 :: "GHC.Types.Int"
142:44-142:45::x :: "{VV : a | VV == x}"
142:46-142:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0}"
146:1-146:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
146:9-146:10::t :: "(Data.Heap.Binominal.Tree a)"
146:16-146:19::lq_anf$##7205759403792806238 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0}"
146:17-146:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
148:5-148:11::lq_anf$##7205759403792806239 :: "GHC.Types.Int"
148:10-148:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
148:14-148:21::lq_anf$##7205759403792806240 :: "GHC.Types.Int"
148:19-148:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
148:24-148:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
148:28-148:30::ds_d3fF :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
149:24-149:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
149:32-149:43::lq_anf$##7205759403792806243 :: "(Data.Heap.Binominal.Tree a)"
149:38-149:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
149:40-149:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
149:44-149:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts'}"
153:1-153:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[a] -> (Data.Heap.Binominal.Heap a)"
153:19-153:32::lq_anf$##7205759403792806273 :: "(Data.Heap.Binominal.Heap a) -> a -> (Data.Heap.Binominal.Heap a)"
153:25-153:31::lq_anf$##7205759403792806272 :: "a -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
153:33-153:38::_ :: "forall a . (Data.Heap.Binominal.Heap a)"
193:1-193:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe a)"
193:21-193:25::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
193:28-193:31::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
193:36-193:49::lq_anf$##7205759403792806223 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
207:1-207:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
208:8-208:21::lq_anf$##7205759403792806276 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
209:33-209:38::_ :: "forall a . (Data.Heap.Binominal.Heap a)"
210:33-210:64::lq_anf$##7205759403792806281 :: "[(Data.Heap.Binominal.Tree a)]"
210:46-210:59::lq_anf$##7205759403792806280 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == len ts1}"
210:55-210:58::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts1}"
210:60-210:63::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts2}"
214:1-214:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (GHC.Maybe.Maybe (a, (Data.Heap.Binominal.Heap a)))"
214:24-214:31::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
215:24-215:48::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
215:26-215:27::m :: "a"
215:32-215:33::m :: "{VV : a | VV == m}"
215:35-215:46::lq_anf$##7205759403792806284 :: "(Data.Heap.Binominal.Heap a)"
215:45-215:46::ds_d3gH :: "(Data.Heap.Binominal.Heap a)"
215:53-215:62::lq_anf$##7205759403792806286 :: "(GHC.Maybe.Maybe a)"
215:61-215:62::ds_d3gH :: "(Data.Heap.Binominal.Heap a)"
219:1-219:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> (GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
219:17-219:24::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
221:8-221:21::lq_anf$##7205759403792806207 :: "(GHC.Maybe.Maybe ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]))"
221:19-221:21::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts}"
222:16-222:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
222:21-222:28::lq_anf$##7205759403792806210 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t\n                                                                      && fst v == t}"
222:22-222:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
222:25-222:27::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0}"
224:10-224:16::lq_anf$##7205759403792806212 :: "{VV : a | VV == root t}"
224:15-224:16::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
224:19-224:26::lq_anf$##7205759403792806213 :: "{VV : a | VV == root t'}"
224:24-224:26::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
225:12-225:24::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
225:17-225:24::lq_anf$##7205759403792806218 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple22 v == ts\n                                                                      && x_Tuple21 v == t\n                                                                      && snd v == ts\n                                                                      && fst v == t}"
225:18-225:19::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
225:21-225:23::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts}"
226:12-226:28::GHC.Maybe.Just :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
226:17-226:28::lq_anf$##7205759403792806217 :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | x_Tuple21 v == t'\n                                                                      && fst v == t'}"
226:18-226:20::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
226:22-226:23::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
226:24-226:27::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts'}"
237:1-237:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a) -> (Data.Heap.Binominal.Heap a)"
241:1-241:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n[(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
241:8-241:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
241:17-241:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts1}"
242:17-242:20::ds_d3fW :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
244:5-244:12::lq_anf$##7205759403792806254 :: "GHC.Types.Int"
244:10-244:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
244:15-244:22::lq_anf$##7205759403792806255 :: "GHC.Types.Int"
244:20-244:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
244:25-244:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
244:30-244:45::lq_anf$##7205759403792806265 :: "[(Data.Heap.Binominal.Tree a)]"
244:37-244:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts1'}"
244:42-244:45::ds_d3fW :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0}"
245:5-245:12::lq_anf$##7205759403792806258 :: "GHC.Types.Int"
245:10-245:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
245:15-245:22::lq_anf$##7205759403792806259 :: "GHC.Types.Int"
245:20-245:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
245:25-245:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
245:30-245:45::lq_anf$##7205759403792806264 :: "[(Data.Heap.Binominal.Tree a)]"
245:37-245:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts1}"
245:41-245:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts2'}"
246:25-246:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n(Data.Heap.Binominal.Tree a) -> [(Data.Heap.Binominal.Tree a)] -> [(Data.Heap.Binominal.Tree a)]"
246:33-246:45::lq_anf$##7205759403792806262 :: "(Data.Heap.Binominal.Tree a)"
246:39-246:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
246:42-246:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
246:46-246:64::lq_anf$##7205759403792806263 :: "[(Data.Heap.Binominal.Tree a)]"
246:54-246:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts1'}"
246:59-246:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == ts2'}"