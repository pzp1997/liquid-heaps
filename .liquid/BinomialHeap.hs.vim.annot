1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
43:1-43:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
43:18-43:19::lq_anf$##7205759403792805188 :: "{v : GHC.Prim.Int# | v == 0}"
44:22-44:28::lq_anf$##7205759403792805189 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
44:27-44:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
44:31-44:45::lq_anf$##7205759403792805190 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0\n                     && len xs <= v}"
44:43-44:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
49:1-49:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0\n                                                         && len (unheap x1) <= VV}"
49:22-49:36::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0\n                                                           && len x1 <= VV}"
49:34-49:36::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
78:1-78:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
79:3-79:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
79:14-79:15::ds_d2WZ :: "{v : GHC.Types.Int | v >= 0}"
79:22-79:23::ds_d2X0 :: "a"
79:34-79:36::ds_d2X1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
79:43-79:45::ds_d2X2 :: "{v : GHC.Types.Int | 1 <= v}"
84:1-84:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
84:30-84:31::x :: "a"
84:32-84:33::y :: "{VV : a | x <= VV}"
84:34-84:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
88:1-88:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
88:34-88:35::x :: "a"
88:36-88:37::y :: "{VV : a | x <= VV}"
88:38-88:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
97:1-97:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
97:10-97:11::x :: "a"
101:1-101:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
101:23-101:24::x :: "a"
105:1-105:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
105:27-105:28::x :: "a"
109:1-109:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
109:6-109:8::t1 :: "(Data.Heap.Binominal.Tree a)"
109:59-109:61::t2 :: "(Data.Heap.Binominal.Tree a)"
110:5-110:7::ds_d2Xq :: "a"
110:11-110:13::ds_d2Xu :: "a"
111:9-111:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
111:25-111:55::_ :: "(Data.Heap.Binominal.Tree a)"
111:53-111:55::lq_anf$##7205759403792805197 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
112:9-112:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
112:25-112:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
112:54-112:56::ds_d2Xq :: "a"
112:57-112:59::ds_d2Xu :: "a"
112:60-112:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
113:10-113:16::lq_anf$##7205759403792805207 :: "GHC.Types.Int"
113:11-113:13::ds_d2Xp :: "{v : GHC.Types.Int | v >= 0}"
113:14-113:15::lq_anf$##7205759403792805206 :: "GHC.Types.Int"
113:17-113:19::ds_d2Xq :: "a"
113:20-113:39::lq_anf$##7205759403792805208 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
113:21-113:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
113:35-113:38::ds_d2Xr :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
113:40-113:51::lq_anf$##7205759403792805209 :: "GHC.Types.Int"
113:41-113:44::ds_d2Xs :: "{v : GHC.Types.Int | 1 <= v}"
113:47-113:50::ds_d2Xw :: "{v : GHC.Types.Int | 1 <= v}"
115:9-115:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
115:25-115:55::_ :: "(Data.Heap.Binominal.Tree a)"
115:53-115:55::lq_anf$##7205759403792805196 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
116:9-116:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
116:25-116:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
116:54-116:56::ds_d2Xu :: "a"
116:57-116:59::ds_d2Xq :: "a"
116:60-116:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
117:10-117:16::lq_anf$##7205759403792805202 :: "GHC.Types.Int"
117:11-117:13::ds_d2Xt :: "{v : GHC.Types.Int | v >= 0}"
117:14-117:15::lq_anf$##7205759403792805201 :: "GHC.Types.Int"
117:17-117:19::ds_d2Xu :: "a"
117:20-117:39::lq_anf$##7205759403792805203 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
117:21-117:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
117:35-117:38::ds_d2Xv :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
117:40-117:51::lq_anf$##7205759403792805204 :: "GHC.Types.Int"
117:41-117:44::ds_d2Xs :: "{v : GHC.Types.Int | 1 <= v}"
117:47-117:50::ds_d2Xw :: "{v : GHC.Types.Int | 1 <= v}"
121:1-121:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
121:14-121:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
125:1-125:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
125:6-125:7::h :: "(Data.Heap.Binominal.Heap a)"
125:10-125:20::lq_anf$##7205759403792805192 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0\n                     && len (unheap h) <= v}"
125:19-125:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
125:24-125:25::lq_anf$##7205759403792805194 :: "GHC.Types.Int"
129:1-129:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
129:11-129:12::x :: "a"
129:20-129:35::lq_anf$##7205759403792805266 :: "[(Data.Heap.Binominal.Tree a)]"
129:21-129:34::lq_anf$##7205759403792805264 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
129:26-129:27::lq_anf$##7205759403792805260 :: "GHC.Types.Int"
129:28-129:29::x :: "{VV : a | VV == x}"
129:30-129:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
129:33-129:34::lq_anf$##7205759403792805263 :: "GHC.Types.Int"
141:1-141:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
141:8-141:9::x :: "a"
141:22-141:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
141:27-141:55::lq_anf$##7205759403792805224 :: "[(Data.Heap.Binominal.Tree a)]"
141:36-141:51::lq_anf$##7205759403792805223 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
141:42-141:43::lq_anf$##7205759403792805219 :: "GHC.Types.Int"
141:44-141:45::x :: "{VV : a | VV == x}"
141:46-141:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
141:49-141:50::lq_anf$##7205759403792805222 :: "GHC.Types.Int"
141:52-141:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
145:1-145:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
145:9-145:10::t :: "(Data.Heap.Binominal.Tree a)"
145:16-145:19::lq_anf$##7205759403792805211 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
145:17-145:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
147:5-147:11::lq_anf$##7205759403792805212 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
147:10-147:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
147:14-147:21::lq_anf$##7205759403792805213 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
147:19-147:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
147:24-147:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
147:28-147:30::ds_d2Xz :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
148:24-148:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
148:32-148:43::lq_anf$##7205759403792805216 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
148:38-148:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
148:40-148:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
148:44-148:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
153:1-153:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
153:10-153:11::lq_anf$##7205759403792805268 :: "{v : GHC.Prim.Int# | v == 0}"
154:14-154:15::lq_anf$##7205759403792805270 :: "GHC.Types.Int"
154:18-154:24::lq_anf$##7205759403792805271 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
154:22-154:24::xs :: "{v : [a] | sumSizeList v >= 0\n           && len v >= 0\n           && v == xs}"
158:1-158:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
158:15-158:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
159:19-159:41::$dOrd_a2Ko :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2Ko}"
159:26-159:27::x :: "{VV : a | VV == x}"
159:28-159:41::lq_anf$##7205759403792805258 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
159:38-159:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
201:1-201:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> a"
201:11-201:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
201:18-201:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
201:24-201:34::lq_anf$##7205759403792805280 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
201:37-201:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                    && sumSizeList v == heapSize x1}"
207:1-207:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
207:17-207:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
207:41-207:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
207:44-207:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
211:1-211:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
211:23-211:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
211:29-211:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
212:33-212:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
212:52-212:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
212:55-212:62::lq_anf$##7205759403792805273 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
212:56-212:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
212:58-212:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
216:1-216:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                      && sumSizeList v == heapSize x1}"
216:34-216:36::lq_anf$##7205759403792805276 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
220:1-220:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
220:11-220:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
221:31-221:60::lq_anf$##7205759403792805285 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
221:42-221:60::lq_anf$##7205759403792805284 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
221:58-221:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
222:8-222:42::lq_anf$##7205759403792805289 :: "[(Data.Heap.Binominal.Tree a)]"
222:16-222:37::lq_anf$##7205759403792805288 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
222:33-222:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
222:38-222:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
226:1-226:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Data.Heap.Binominal.Heap {VV : a | fst v <= VV})) | 1 + heapSize (snd v) == heapSize x2}"
226:12-226:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < len (unheap VV)}"
227:36-227:65::lq_anf$##7205759403792805291 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
227:47-227:65::lq_anf$##7205759403792805290 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
227:63-227:64::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < len (unheap v)\n                                    && heapSize v >= 0\n                                    && v == h}"
228:4-228:10::minElt :: "{VV : a | VV == minElt}"
228:12-228:51::lq_anf$##7205759403792805296 :: "(Data.Heap.Binominal.Heap a)"
228:17-228:51::lq_anf$##7205759403792805295 :: "[(Data.Heap.Binominal.Tree a)]"
228:25-228:46::lq_anf$##7205759403792805294 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
228:42-228:45::ts1 :: "{v : [(Data.Heap.Binominal.Tree {VV : a | minElt <= VV})] | len v >= 0\n                                                            && sumSizeList v >= 0\n                                                            && v == ts1}"
228:47-228:50::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
232:1-232:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
232:18-232:25::lq_anf$##7205759403792805253 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
232:19-232:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
232:22-232:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
234:8-234:10::t' :: "(Data.Heap.Binominal.Tree a)"
234:12-234:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
234:19-234:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
234:30-234:32::ds_d2Z0 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
235:7-235:8::x :: "{VV : a | VV == root t}"
235:11-235:17::_ :: "{VV : a | VV == root t}"
235:16-235:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
236:7-236:9::x' :: "{VV : a | VV == root t'}"
236:12-236:19::_ :: "{VV : a | VV == root t'}"
236:17-236:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
237:7-237:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
237:18-237:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
237:46-237:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
238:7-238:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
238:19-238:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
238:47-238:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
239:6-239:7::x :: "{VV : a | VV == root t\n          && VV == x}"
239:10-239:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
241:9-241:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
241:14-241:57::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
241:43-241:44::x :: "{VV : a | VV == root t\n          && VV == x}"
241:45-241:47::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
241:48-241:57::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
242:9-242:11::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
242:14-242:55::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
242:47-242:48::x :: "{VV : a | VV == root t\n          && VV == x}"
242:49-242:51::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
242:52-242:55::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
243:6-243:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
243:9-243:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == hd}"
243:12-243:14::tl :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && len v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && v == tl}"
245:9-245:11::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
245:14-245:56::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
245:43-245:45::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
245:46-245:47::x :: "{VV : a | VV == root t\n          && VV == x}"
245:48-245:56::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
246:6-246:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
246:10-246:12::hd :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == hd}"
246:13-246:16::ts' :: "{v : [(Data.Heap.Binominal.Tree {VV : a | root t' <= VV})] | len v >= 0\n                                                             && sumSizeList v >= 0\n                                                             && v == ts'}"
259:1-259:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
259:31-259:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
259:36-259:52::lq_anf$##7205759403792805245 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
259:44-259:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
259:48-259:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
263:1-263:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
263:8-263:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
263:17-263:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
264:17-264:20::ds_d2XV :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
266:5-266:12::lq_anf$##7205759403792805229 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
266:10-266:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
266:15-266:22::lq_anf$##7205759403792805230 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
266:20-266:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
266:25-266:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
266:30-266:45::lq_anf$##7205759403792805240 :: "[(Data.Heap.Binominal.Tree a)]"
266:37-266:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
266:42-266:45::ds_d2XV :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
267:5-267:12::lq_anf$##7205759403792805233 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
267:10-267:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
267:15-267:22::lq_anf$##7205759403792805234 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
267:20-267:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
267:25-267:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
267:30-267:45::lq_anf$##7205759403792805239 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
267:37-267:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
267:41-267:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
268:25-268:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
268:33-268:45::lq_anf$##7205759403792805237 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
268:39-268:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
268:42-268:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
268:46-268:64::lq_anf$##7205759403792805238 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
268:54-268:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
268:59-268:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
282:1-282:9::Data.Heap.Binominal.heapSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> {v : [a] | len v == heapSize x2}"
282:22-282:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
284:8-284:14::minElt :: "a"
284:16-284:18::h' :: "(Data.Heap.Binominal.Heap a)"
284:22-284:34::_ :: "(a, (Data.Heap.Binominal.Heap {VV : a | fst x4 <= VV}))"
284:33-284:34::ds_d2ZP :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0}"
285:3-285:9::minElt :: "{VV : a | VV == minElt}"
285:12-285:23::lq_anf$##7205759403792805299 :: "{v : [a] | len v == heapSize h'}"
285:21-285:23::h' :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h'}"