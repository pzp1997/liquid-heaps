1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
42:1-42:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
42:18-42:19::lq_anf$##7205759403792804827 :: "{v : GHC.Prim.Int# | v == 0}"
43:22-43:28::lq_anf$##7205759403792804828 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
43:27-43:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
43:31-43:45::lq_anf$##7205759403792804829 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0}"
43:43-43:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
48:1-48:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}"
48:10-48:11::h :: "(Data.Heap.Binominal.Heap a)"
49:8-49:9::_ :: "{v : (Data.Heap.Binominal.Heap a) | v == h}"
50:16-50:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
50:28-50:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
79:1-79:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
80:3-80:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
80:14-80:15::ds_d2SD :: "{v : GHC.Types.Int | v >= 0}"
80:22-80:23::ds_d2SE :: "a"
80:34-80:36::ds_d2SF :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
80:43-80:45::ds_d2SG :: "{v : GHC.Types.Int | 1 <= v}"
85:1-85:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
85:30-85:31::x :: "a"
85:32-85:33::y :: "{VV : a | x <= VV}"
85:34-85:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
94:1-94:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
94:10-94:11::x :: "a"
98:1-98:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
98:6-98:8::t1 :: "(Data.Heap.Binominal.Tree a)"
98:59-98:61::t2 :: "(Data.Heap.Binominal.Tree a)"
99:5-99:7::ds_d2T4 :: "a"
99:11-99:13::ds_d2T8 :: "a"
100:9-100:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
100:25-100:55::_ :: "(Data.Heap.Binominal.Tree a)"
100:53-100:55::lq_anf$##7205759403792804836 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
101:9-101:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
101:25-101:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
101:54-101:56::ds_d2T4 :: "a"
101:57-101:59::ds_d2T8 :: "a"
101:60-101:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
102:10-102:16::lq_anf$##7205759403792804846 :: "GHC.Types.Int"
102:11-102:13::ds_d2T3 :: "{v : GHC.Types.Int | v >= 0}"
102:14-102:15::lq_anf$##7205759403792804845 :: "GHC.Types.Int"
102:17-102:19::ds_d2T4 :: "a"
102:20-102:39::lq_anf$##7205759403792804847 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
102:21-102:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
102:35-102:38::ds_d2T5 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
102:40-102:51::lq_anf$##7205759403792804848 :: "GHC.Types.Int"
102:41-102:44::ds_d2T6 :: "{v : GHC.Types.Int | 1 <= v}"
102:47-102:50::ds_d2Ta :: "{v : GHC.Types.Int | 1 <= v}"
104:9-104:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
104:25-104:55::_ :: "(Data.Heap.Binominal.Tree a)"
104:53-104:55::lq_anf$##7205759403792804835 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
105:9-105:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
105:25-105:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
105:54-105:56::ds_d2T8 :: "a"
105:57-105:59::ds_d2T4 :: "a"
105:60-105:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
106:10-106:16::lq_anf$##7205759403792804841 :: "GHC.Types.Int"
106:11-106:13::ds_d2T7 :: "{v : GHC.Types.Int | v >= 0}"
106:14-106:15::lq_anf$##7205759403792804840 :: "GHC.Types.Int"
106:17-106:19::ds_d2T8 :: "a"
106:20-106:39::lq_anf$##7205759403792804842 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
106:21-106:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
106:35-106:38::ds_d2T9 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
106:40-106:51::lq_anf$##7205759403792804843 :: "GHC.Types.Int"
106:41-106:44::ds_d2T6 :: "{v : GHC.Types.Int | 1 <= v}"
106:47-106:50::ds_d2Ta :: "{v : GHC.Types.Int | 1 <= v}"
110:1-110:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
110:14-110:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
114:1-114:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
114:6-114:7::h :: "(Data.Heap.Binominal.Heap a)"
114:10-114:20::lq_anf$##7205759403792804831 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}"
114:19-114:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
114:24-114:25::lq_anf$##7205759403792804833 :: "GHC.Types.Int"
118:1-118:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
118:11-118:12::x :: "a"
118:20-118:35::lq_anf$##7205759403792804895 :: "[(Data.Heap.Binominal.Tree a)]"
118:21-118:34::lq_anf$##7205759403792804893 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
118:26-118:27::lq_anf$##7205759403792804889 :: "GHC.Types.Int"
118:28-118:29::x :: "{VV : a | VV == x}"
118:30-118:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
118:33-118:34::lq_anf$##7205759403792804892 :: "GHC.Types.Int"
130:1-130:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
130:8-130:9::x :: "a"
130:22-130:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
130:27-130:55::lq_anf$##7205759403792804863 :: "[(Data.Heap.Binominal.Tree a)]"
130:36-130:51::lq_anf$##7205759403792804862 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
130:42-130:43::lq_anf$##7205759403792804858 :: "GHC.Types.Int"
130:44-130:45::x :: "{VV : a | VV == x}"
130:46-130:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
130:49-130:50::lq_anf$##7205759403792804861 :: "GHC.Types.Int"
130:52-130:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
134:1-134:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
134:9-134:10::t :: "(Data.Heap.Binominal.Tree a)"
134:16-134:19::lq_anf$##7205759403792804850 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
134:17-134:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
136:5-136:11::lq_anf$##7205759403792804851 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
136:10-136:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
136:14-136:21::lq_anf$##7205759403792804852 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
136:19-136:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
136:24-136:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
136:28-136:30::ds_d2Td :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
137:24-137:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
137:32-137:43::lq_anf$##7205759403792804855 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
137:38-137:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
137:40-137:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
137:44-137:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
142:1-142:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
142:10-142:11::lq_anf$##7205759403792804897 :: "{v : GHC.Prim.Int# | v == 0}"
143:14-143:15::lq_anf$##7205759403792804899 :: "GHC.Types.Int"
143:18-143:24::lq_anf$##7205759403792804900 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
143:22-143:24::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
147:1-147:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
147:15-147:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
148:19-148:41::$dOrd_a2Lm :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2Lm}"
148:26-148:27::x :: "{VV : a | VV == x}"
148:28-148:41::lq_anf$##7205759403792804887 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
148:38-148:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
192:1-192:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> a"
192:11-192:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
192:18-192:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
192:24-192:34::lq_anf$##7205759403792804920 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
192:37-192:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                && sumSizeList v == heapSize x1}"
200:1-200:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
200:17-200:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
200:41-200:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
200:44-200:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
204:1-204:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
204:23-204:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
204:29-204:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
205:33-205:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
205:52-205:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
205:55-205:62::lq_anf$##7205759403792804902 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
205:56-205:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
205:58-205:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
209:1-209:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                  && sumSizeList v == heapSize x1}"
209:34-209:36::lq_anf$##7205759403792804905 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
213:1-213:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
213:11-213:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
214:31-214:60::lq_anf$##7205759403792804925 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)])"
214:42-214:60::lq_anf$##7205759403792804924 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
214:58-214:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
215:8-215:42::lq_anf$##7205759403792804929 :: "[(Data.Heap.Binominal.Tree a)]"
215:16-215:37::lq_anf$##7205759403792804928 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
215:33-215:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
215:38-215:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
219:1-219:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (a, (Data.Heap.Binominal.Heap a)) | 1 + heapSize (snd v) == heapSize x2}"
219:12-219:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
219:25-219:34::lq_anf$##7205759403792804930 :: "a"
219:33-219:34::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
219:36-219:47::lq_anf$##7205759403792804931 :: "{v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize h}"
219:46-219:47::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
223:1-223:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
223:18-223:25::lq_anf$##7205759403792804915 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
223:19-223:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
223:22-223:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
225:8-225:10::t' :: "(Data.Heap.Binominal.Tree a)"
225:12-225:15::ts' :: "{VV : [(Data.Heap.Binominal.Tree a)] | len VV >= 0}"
225:19-225:32::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree a)]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
225:30-225:32::ds_d2RP :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
226:6-226:12::lq_anf$##7205759403792804910 :: "{VV : a | VV == root t}"
226:11-226:12::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
226:15-226:22::lq_anf$##7205759403792804911 :: "{VV : a | VV == root t'}"
226:20-226:22::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
227:8-227:15::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
227:9-227:10::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
227:12-227:14::ds_d2RP :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
228:8-228:19::GHC.Tuple.(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
228:9-228:11::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
228:13-228:14::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
228:15-228:18::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
239:1-239:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
239:31-239:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
239:36-239:52::lq_anf$##7205759403792804884 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
239:44-239:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
239:48-239:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
243:1-243:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
243:8-243:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
243:17-243:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
244:17-244:20::ds_d2Tz :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
246:5-246:12::lq_anf$##7205759403792804868 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
246:10-246:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
246:15-246:22::lq_anf$##7205759403792804869 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
246:20-246:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
246:25-246:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
246:30-246:45::lq_anf$##7205759403792804879 :: "[(Data.Heap.Binominal.Tree a)]"
246:37-246:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
246:42-246:45::ds_d2Tz :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
247:5-247:12::lq_anf$##7205759403792804872 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
247:10-247:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
247:15-247:22::lq_anf$##7205759403792804873 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
247:20-247:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
247:25-247:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
247:30-247:45::lq_anf$##7205759403792804878 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
247:37-247:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
247:41-247:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
248:25-248:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
248:33-248:45::lq_anf$##7205759403792804876 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
248:39-248:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
248:42-248:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
248:46-248:64::lq_anf$##7205759403792804877 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
248:54-248:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
248:59-248:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"