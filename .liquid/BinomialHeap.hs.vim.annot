1:1-1:1::Data.Heap.Binominal.$trModule :: "GHC.Types.Module"
42:1-42:12::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
42:18-42:19::lq_anf$##7205759403792805026 :: "{v : GHC.Prim.Int# | v == 0}"
43:22-43:28::lq_anf$##7205759403792805027 :: "{v : GHC.Types.Int | 1 <= v\n                     && v == 1 + sumSizeList (subtrees x)\n                     && v == size x}"
43:27-43:28::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
43:31-43:45::lq_anf$##7205759403792805028 :: "{v : GHC.Types.Int | v == sumSizeList xs\n                     && v >= 0}"
43:43-43:45::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == xs}"
48:1-48:9::Data.Heap.Binominal.heapSize :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {VV : GHC.Types.Int | VV == heapSize x1\n                                                         && VV >= 0}"
48:10-48:11::h :: "(Data.Heap.Binominal.Heap a)"
49:8-49:9::_ :: "{v : (Data.Heap.Binominal.Heap a) | v == h}"
50:16-50:30::Data.Heap.Binominal.sumSizeList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {VV : GHC.Types.Int | VV == sumSizeList x1\n                                                           && VV >= 0}"
50:28-50:30::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
79:1-79:28::Data.Heap.Binominal.treeIsBoundedByItsRootLemma :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : (Data.Heap.Binominal.Tree {VV : a | root x1 <= VV}) | size VV == size x1}"
80:3-80:46::Data.Heap.Binominal.Node :: "forall a .\nx1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> x4:{v : GHC.Types.Int | 1 <= v\n                                                                                                                          && v == 1 + sumSizeList x3} -> {v : (Data.Heap.Binominal.Tree a) | size v == x4\n                                                                                                                                                                                             && subtrees v == x3\n                                                                                                                                                                                             && root v == x2\n                                                                                                                                                                                             && rank v == x1}"
80:14-80:15::ds_d2Ve :: "{v : GHC.Types.Int | v >= 0}"
80:22-80:23::ds_d2Vf :: "a"
80:34-80:36::ds_d2Vg :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
80:43-80:45::ds_d2Vh :: "{v : GHC.Types.Int | 1 <= v}"
85:1-85:29::Data.Heap.Binominal.boundedTreeTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:(Data.Heap.Binominal.Tree {VV : a | x2 <= VV}) -> {VV : (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) | size VV == size x3}"
85:30-85:31::x :: "a"
85:32-85:33::y :: "{VV : a | x <= VV}"
85:34-85:38::tree :: "(Data.Heap.Binominal.Tree {VV : a | y <= VV})"
89:1-89:33::Data.Heap.Binominal.boundedTreeListTransitivityLemma :: "forall a .\nx1:a -> x2:{VV : a | x1 <= VV} -> x3:[(Data.Heap.Binominal.Tree {VV : a | x2 <= VV})] -> {v : [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] | sumSizeList v == sumSizeList x3}"
89:34-89:35::x :: "a"
89:36-89:37::y :: "{VV : a | x <= VV}"
89:38-89:40::ts :: "[(Data.Heap.Binominal.Tree {VV : a | y <= VV})]"
98:1-98:7::Data.Heap.Binominal.assert :: "forall a . {v : GHC.Types.Bool | v} -> a -> a"
98:10-98:11::x :: "a"
102:1-102:5::Data.Heap.Binominal.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:(Data.Heap.Binominal.Tree a) -> {v : (Data.Heap.Binominal.Tree a) | size v == size x2 + size x3}"
102:6-102:8::t1 :: "(Data.Heap.Binominal.Tree a)"
102:59-102:61::t2 :: "(Data.Heap.Binominal.Tree a)"
103:5-103:7::ds_d2VF :: "a"
103:11-103:13::ds_d2VJ :: "a"
104:9-104:22::t2BoundedByX2 :: "(Data.Heap.Binominal.Tree a)"
104:25-104:55::_ :: "(Data.Heap.Binominal.Tree a)"
104:53-104:55::lq_anf$##7205759403792805035 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
105:9-105:22::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
105:25-105:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2}"
105:54-105:56::ds_d2VF :: "a"
105:57-105:59::ds_d2VJ :: "a"
105:60-105:73::t2BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2BoundedByX2}"
106:10-106:16::lq_anf$##7205759403792805045 :: "GHC.Types.Int"
106:11-106:13::ds_d2VE :: "{v : GHC.Types.Int | v >= 0}"
106:14-106:15::lq_anf$##7205759403792805044 :: "GHC.Types.Int"
106:17-106:19::ds_d2VF :: "a"
106:20-106:39::lq_anf$##7205759403792805046 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t2BoundedByX1}"
106:21-106:34::t2BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t2BoundedByX2\n                                    && v == t2BoundedByX1}"
106:35-106:38::ds_d2VG :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
106:40-106:51::lq_anf$##7205759403792805047 :: "GHC.Types.Int"
106:41-106:44::ds_d2VH :: "{v : GHC.Types.Int | 1 <= v}"
106:47-106:50::ds_d2VL :: "{v : GHC.Types.Int | 1 <= v}"
108:9-108:22::t1BoundedByX1 :: "(Data.Heap.Binominal.Tree a)"
108:25-108:55::_ :: "(Data.Heap.Binominal.Tree a)"
108:53-108:55::lq_anf$##7205759403792805034 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
109:9-109:22::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
109:25-109:73::_ :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1}"
109:54-109:56::ds_d2VJ :: "a"
109:57-109:59::ds_d2VF :: "a"
109:60-109:73::t1BoundedByX1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1BoundedByX1}"
110:10-110:16::lq_anf$##7205759403792805040 :: "GHC.Types.Int"
110:11-110:13::ds_d2VI :: "{v : GHC.Types.Int | v >= 0}"
110:14-110:15::lq_anf$##7205759403792805039 :: "GHC.Types.Int"
110:17-110:19::ds_d2VJ :: "a"
110:20-110:39::lq_anf$##7205759403792805041 :: "{v : [(Data.Heap.Binominal.Tree a)] | head v == t1BoundedByX2}"
110:21-110:34::t1BoundedByX2 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1BoundedByX1\n                                    && v == t1BoundedByX2}"
110:35-110:38::ds_d2VK :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
110:40-110:51::lq_anf$##7205759403792805042 :: "GHC.Types.Int"
110:41-110:44::ds_d2VH :: "{v : GHC.Types.Int | 1 <= v}"
110:47-110:50::ds_d2VL :: "{v : GHC.Types.Int | 1 <= v}"
114:1-114:6::Data.Heap.Binominal.empty :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
114:14-114:16::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
118:1-118:5::Data.Heap.Binominal.null :: "forall a .\nx1:(Data.Heap.Binominal.Heap a) -> {v : GHC.Types.Bool | v <=> heapSize x1 == 0}"
118:6-118:7::h :: "(Data.Heap.Binominal.Heap a)"
118:10-118:20::lq_anf$##7205759403792805030 :: "{v : GHC.Types.Int | v == heapSize h\n                     && v >= 0}"
118:19-118:20::h :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v >= 0\n                                    && v == h}"
118:24-118:25::lq_anf$##7205759403792805032 :: "GHC.Types.Int"
122:1-122:10::Data.Heap.Binominal.singleton :: "forall a .\na -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == 1}"
122:11-122:12::x :: "a"
122:20-122:35::lq_anf$##7205759403792805104 :: "[(Data.Heap.Binominal.Tree a)]"
122:21-122:34::lq_anf$##7205759403792805102 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
122:26-122:27::lq_anf$##7205759403792805098 :: "GHC.Types.Int"
122:28-122:29::x :: "{VV : a | VV == x}"
122:30-122:32::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
122:33-122:34::lq_anf$##7205759403792805101 :: "GHC.Types.Int"
134:1-134:7::Data.Heap.Binominal.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> x3:(Data.Heap.Binominal.Heap a) -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize x3 == heapSize v}"
134:8-134:9::x :: "a"
134:22-134:55::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
134:27-134:55::lq_anf$##7205759403792805062 :: "[(Data.Heap.Binominal.Tree a)]"
134:36-134:51::lq_anf$##7205759403792805061 :: "{v : (Data.Heap.Binominal.Tree a) | root v == x}"
134:42-134:43::lq_anf$##7205759403792805057 :: "GHC.Types.Int"
134:44-134:45::x :: "{VV : a | VV == x}"
134:46-134:48::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
134:49-134:50::lq_anf$##7205759403792805060 :: "GHC.Types.Int"
134:52-134:54::ts :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
138:1-138:8::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
138:9-138:10::t :: "(Data.Heap.Binominal.Tree a)"
138:16-138:19::lq_anf$##7205759403792805049 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
138:17-138:18::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
140:5-140:11::lq_anf$##7205759403792805050 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t}"
140:10-140:11::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
140:14-140:21::lq_anf$##7205759403792805051 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t'}"
140:19-140:21::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
140:24-140:25::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
140:28-140:30::ds_d2VO :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
141:24-141:47::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
141:32-141:43::lq_anf$##7205759403792805054 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t + size t'}"
141:38-141:39::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
141:40-141:42::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == t'}"
141:44-141:47::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
146:1-146:4::Data.Heap.Binominal.len :: "forall a .\nx1:[a] -> {VV : GHC.Types.Int | VV == len x1\n                                && VV >= 0}"
146:10-146:11::lq_anf$##7205759403792805106 :: "{v : GHC.Prim.Int# | v == 0}"
147:14-147:15::lq_anf$##7205759403792805108 :: "GHC.Types.Int"
147:18-147:24::lq_anf$##7205759403792805109 :: "{v : GHC.Types.Int | v == len xs\n                     && v >= 0}"
147:22-147:24::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
151:1-151:9::Data.Heap.Binominal.fromList :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {v : (Data.Heap.Binominal.Heap a) | heapSize v == len x2}"
151:15-151:20::_ :: "forall a . {v : (Data.Heap.Binominal.Heap a) | heapSize v == 0}"
152:19-152:41::$dOrd_a2JY :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a2JY}"
152:26-152:27::x :: "{VV : a | VV == x}"
152:28-152:41::lq_anf$##7205759403792805096 :: "{v : (Data.Heap.Binominal.Heap a) | heapSize v == len xs}"
152:38-152:40::xs :: "{v : [a] | len v >= 0\n           && sumSizeList v >= 0\n           && v == xs}"
196:1-196:8::Data.Heap.Binominal.minimum :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> a"
196:11-196:15::_ :: "forall a .\nx1:(Data.Heap.Binominal.Tree a) -> {VV : a | VV == root x1}"
196:18-196:21::_ :: "forall a b . x1:(a, b) -> {VV : a | VV == fst x1}"
196:24-196:34::lq_anf$##7205759403792805118 :: "x1:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x15) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x1}"
196:37-196:51::_ :: "forall a .\nx1:{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                && sumSizeList v == heapSize x1}"
204:1-204:16::Data.Heap.Binominal.reverseHeapList :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1}"
204:17-204:19::xs :: "[(Data.Heap.Binominal.Tree a)]"
204:41-204:43::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
204:44-204:46::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
208:1-208:19::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
208:23-208:26::acc :: "[(Data.Heap.Binominal.Tree a)]"
208:29-208:32::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
209:33-209:62::Data.Heap.Binominal.reverseHeapListAux :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> x2:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x1 + sumSizeList x2}"
209:52-209:54::xs :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == xs}"
209:55-209:62::lq_anf$##7205759403792805111 :: "{v : [(Data.Heap.Binominal.Tree a)] | tail v == acc\n                                      && head v == x\n                                      && len v == 1 + len acc\n                                      && sumSizeList v == size x + sumSizeList acc}"
209:56-209:57::x :: "{v : (Data.Heap.Binominal.Tree a) | v == x}"
209:58-209:61::acc :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == acc}"
213:1-213:15::Data.Heap.Binominal.unheapNonempty :: "forall a .\nx1:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                                                                                  && sumSizeList v == heapSize x1}"
213:34-213:36::lq_anf$##7205759403792805114 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts}"
217:1-217:10::Data.Heap.Binominal.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize x2}"
217:11-217:12::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
218:31-218:60::lq_anf$##7205759403792805123 :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
218:42-218:60::lq_anf$##7205759403792805122 :: "{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v\n                                      && sumSizeList v == heapSize h}"
218:58-218:59::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
219:8-219:42::lq_anf$##7205759403792805127 :: "[(Data.Heap.Binominal.Tree a)]"
219:16-219:37::lq_anf$##7205759403792805126 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1}"
219:33-219:36::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
219:38-219:41::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
223:1-223:11::Data.Heap.Binominal.deleteMin2 :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV} -> {v : (a, (Data.Heap.Binominal.Heap a)) | 1 + heapSize (snd v) == heapSize x2}"
223:12-223:13::h :: "{VV : (Data.Heap.Binominal.Heap a) | 0 < heapSize VV}"
223:17-223:26::lq_anf$##7205759403792805128 :: "a"
223:25-223:26::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
223:28-223:39::lq_anf$##7205759403792805129 :: "{v : (Data.Heap.Binominal.Heap a) | 1 + heapSize v == heapSize h}"
223:38-223:39::h :: "{v : (Data.Heap.Binominal.Heap a) | 0 < heapSize v\n                                    && heapSize v >= 0\n                                    && v == h}"
228:1-228:11::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
228:18-228:25::lq_anf$##7205759403792805091 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v == 0\n                                      && sumSizeList v == 0}"
228:19-228:20::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
228:22-228:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                            && sumSizeList v == 0}"
230:7-230:10::acc :: "((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x9) <= VV})])"
230:13-230:26::Data.Heap.Binominal.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{v : [(Data.Heap.Binominal.Tree a)] | 0 < len v} -> {v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst v) <= VV})]) | size (fst v) + sumSizeList (snd v) == sumSizeList x2}"
230:24-230:26::ds_d2X8 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
231:7-231:9::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == fst acc}"
231:12-231:19::_ :: "{v : (Data.Heap.Binominal.Tree a) | v == fst acc}"
231:16-231:19::acc :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x10) <= VV})]) | v == acc}"
232:7-232:10::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == snd acc}"
232:13-232:20::_ :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == snd acc}"
232:17-232:20::acc :: "{v : ((Data.Heap.Binominal.Tree a), [(Data.Heap.Binominal.Tree {VV : a | root (fst x10) <= VV})]) | v == acc}"
233:7-233:9::x' :: "{VV : a | VV == root t'}"
233:12-233:19::_ :: "{VV : a | VV == root t'}"
233:17-233:19::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == fst acc\n                                    && v == t'}"
234:7-234:8::x :: "{VV : a | VV == root t}"
234:11-234:17::_ :: "{VV : a | VV == root t}"
234:16-234:17::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
235:7-235:15::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
235:18-235:47::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t}"
235:46-235:47::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
236:7-236:16::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
236:19-236:49::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'}"
236:47-236:49::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == fst acc\n                                    && v == t'}"
237:6-237:7::x :: "{VV : a | VV == root t\n          && VV == x}"
237:10-237:12::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
239:9-239:20::tBoundedByX :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
239:23-239:66::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'}"
239:52-239:53::x :: "{VV : a | VV == root t\n          && VV == x}"
239:54-239:56::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
239:57-239:66::tBounded' :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t' <= VV}) | size v == size t'\n                                                           && v == tBounded'}"
240:9-240:21::tsBoundedByX :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
240:24-240:65::_ :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'}"
240:57-240:58::x :: "{VV : a | VV == root t\n          && VV == x}"
240:59-240:61::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
240:62-240:65::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == snd acc\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
241:6-241:7::t :: "{v : (Data.Heap.Binominal.Tree a) | v == t}"
241:9-241:20::tBoundedByX :: "{v : (Data.Heap.Binominal.Tree {VV : a | x <= VV}) | size v == size tBounded'\n                                                     && v == tBoundedByX}"
241:23-241:35::tsBoundedByX :: "{v : [(Data.Heap.Binominal.Tree {VV : a | x <= VV})] | sumSizeList v == sumSizeList ts'\n                                                       && len v >= 0\n                                                       && sumSizeList v >= 0\n                                                       && v == tsBoundedByX}"
244:9-244:21::tBoundedByX' :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
244:24-244:66::_ :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded}"
244:53-244:55::x' :: "{VV : a | VV == root t'\n          && VV == x'}"
244:56-244:57::x :: "{VV : a | VV == root t\n          && VV == x}"
244:58-244:66::tBounded :: "{v : (Data.Heap.Binominal.Tree {VV : a | root t <= VV}) | size v == size t\n                                                          && v == tBounded}"
245:6-245:8::t' :: "{v : (Data.Heap.Binominal.Tree a) | v == fst acc\n                                    && v == t'}"
245:10-245:22::tBoundedByX' :: "{v : (Data.Heap.Binominal.Tree {VV : a | x' <= VV}) | size v == size tBounded\n                                                      && v == tBoundedByX'}"
245:25-245:28::ts' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && v == snd acc\n                                      && sumSizeList v >= 0\n                                      && v == ts'}"
250:1-250:18::Data.Heap.Binominal.assertBoundedTree :: "forall a b .\nx1:a -> (Data.Heap.Binominal.Tree {VV : a | x1 <= VV}) -> b -> b"
250:23-250:24::x :: "a"
254:1-254:22::Data.Heap.Binominal.assertBoundedTreeList :: "forall a b .\nx1:a -> [(Data.Heap.Binominal.Tree {VV : a | x1 <= VV})] -> b -> b"
254:27-254:28::x :: "a"
267:1-267:6::Data.Heap.Binominal.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Heap a) -> x3:(Data.Heap.Binominal.Heap a) -> {VV : (Data.Heap.Binominal.Heap a) | heapSize VV == heapSize x2 + heapSize x3}"
267:31-267:52::Data.Heap.Binominal.Heap :: "forall a .\nx1:[(Data.Heap.Binominal.Tree a)] -> {v : (Data.Heap.Binominal.Heap a) | unheap v == x1\n                                                                         && heapSize v == sumSizeList x1}"
267:36-267:52::lq_anf$##7205759403792805083 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2}"
267:44-267:47::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
267:48-267:51::ts2 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2}"
271:1-271:7::Data.Heap.Binominal.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Data.Heap.Binominal.Tree a)] -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList x2 + sumSizeList x3}"
271:8-271:11::ts1 :: "[(Data.Heap.Binominal.Tree a)]"
271:17-271:20::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
272:17-272:20::ds_d2Wa :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
274:5-274:12::lq_anf$##7205759403792805067 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
274:10-274:12::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
274:15-274:22::lq_anf$##7205759403792805068 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
274:20-274:22::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
274:25-274:27::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
274:30-274:45::lq_anf$##7205759403792805078 :: "[(Data.Heap.Binominal.Tree a)]"
274:37-274:41::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
274:42-274:45::ds_d2Wa :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0}"
275:5-275:12::lq_anf$##7205759403792805071 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t2}"
275:10-275:12::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
275:15-275:22::lq_anf$##7205759403792805072 :: "{v : GHC.Types.Int | v >= 0\n                     && v == rank t1}"
275:20-275:22::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
275:25-275:27::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
275:30-275:45::lq_anf$##7205759403792805077 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1 + sumSizeList ts2'}"
275:37-275:40::ts1 :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1}"
275:41-275:45::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"
276:25-276:64::Data.Heap.Binominal.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Data.Heap.Binominal.Tree a) -> x3:[(Data.Heap.Binominal.Tree a)] -> {v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == size x2 + sumSizeList x3}"
276:33-276:45::lq_anf$##7205759403792805075 :: "{v : (Data.Heap.Binominal.Tree a) | size v == size t1 + size t2}"
276:39-276:41::t1 :: "{v : (Data.Heap.Binominal.Tree a) | v == t1}"
276:42-276:44::t2 :: "{v : (Data.Heap.Binominal.Tree a) | v == t2}"
276:46-276:64::lq_anf$##7205759403792805076 :: "{v : [(Data.Heap.Binominal.Tree a)] | sumSizeList v == sumSizeList ts1' + sumSizeList ts2'}"
276:54-276:58::ts1' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts1'}"
276:59-276:63::ts2' :: "{v : [(Data.Heap.Binominal.Tree a)] | len v >= 0\n                                      && sumSizeList v >= 0\n                                      && v == ts2'}"